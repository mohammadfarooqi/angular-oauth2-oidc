{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://angular-oauth2-oidc/types.ts","ng://angular-oauth2-oidc/base64-helper.ts","ng://angular-oauth2-oidc/token-validation/validation-handler.ts","ng://angular-oauth2-oidc/url-helper.service.ts","ng://angular-oauth2-oidc/events.ts","ng://angular-oauth2-oidc/auth.config.ts","ng://angular-oauth2-oidc/encoder.ts","ng://angular-oauth2-oidc/token-validation/crypto-handler.ts","ng://angular-oauth2-oidc/oauth-service.ts","ng://angular-oauth2-oidc/oauth-module.config.ts","ng://angular-oauth2-oidc/interceptors/resource-server-error-handler.ts","ng://angular-oauth2-oidc/interceptors/default-oauth.interceptor.ts","ng://angular-oauth2-oidc/token-validation/null-validation-handler.ts","ng://angular-oauth2-oidc/factories.ts","ng://angular-oauth2-oidc/token-validation/jwks-validation-handler.ts","ng://angular-oauth2-oidc/angular-oauth-oidic.module.ts","ng://angular-oauth2-oidc/tokens.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","__values","o","m","i","__read","r","ar","error","preventClearHashAfterLogin","b64DecodeUnicode","str","base64","replace","decodeURIComponent","atob","split","map","c","charCodeAt","toString","slice","join","base64UrlEncode","btoa","AbstractValidationHandler","validateAtHash","params","hashAlg","inferHashAlgorithm","idTokenHeader","calcHash","accessToken","tokenHash","_a","leftMostHalf","substr","atHash","claimsAtHash","idTokenClaims","console","jwtHeader","alg","match","Error","UrlHelperService","getHashFragmentParams","customHashFragment","hash","window","location","indexOf","questionMarkPosition","parseQueryString","queryString","pairs","pair","separatorIndex","escapedKey","escapedValue","key","data","Injectable","type","OAuthSuccessEvent","info","_this","_super","tslib_1.__extends","OAuthEvent","OAuthInfoEvent","OAuthErrorEvent","reason","AuthConfig","json","clientId","redirectUri","postLogoutRedirectUri","loginUrl","scope","resource","rngUrl","oidc","requestAccessToken","options","issuer","logoutUrl","clearHashAfterLogin","tokenEndpoint","userinfoEndpoint","responseType","showDebugInformation","silentRefreshRedirectUri","silentRefreshMessagePrefix","silentRefreshShowIFrame","siletRefreshTimeout","silentRefreshTimeout","dummyClientSecret","requireHttps","strictDiscoveryDocumentValidation","jwks","customQueryParams","silentRefreshIFrameName","timeoutFactor","sessionChecksEnabled","sessionCheckIntervall","sessionCheckIFrameUrl","sessionCheckIFrameName","disableAtHashCheck","skipSubjectCheck","useIdTokenHintForSilentRefresh","skipIssuerCheck","nonceStateSeparator","useHttpBasicAuth","disablePKCE","openUri","uri","href","assign","WebHttpUrlEncodingCodec","encodeKey","k","encodeURIComponent","encodeValue","decodeKey","decodeValue","OAuthService","ngZone","http","storage","tokenValidationHandler","config","urlHelper","logger","crypto","discoveryDocumentLoaded","state","eventsSubject","Subject","discoveryDocumentLoadedSubject","grantTypesSupported","inImplicitFlow","debug","discoveryDocumentLoaded$","asObservable","events","configure","setStorage","sessionStorage","setupRefreshTimer","setupSessionCheck","configChanged","restartSessionChecksIfStillLoggedIn","hasValidIdToken","initSessionCheck","restartRefreshTimerIfStillLoggedIn","setupExpirationTimers","pipe","filter","subscribe","setupAutomaticSilentRefresh","listenTo","noPrompt","shouldRunSilentRefresh","tap","refreshInternal","catch","refreshToken","silentRefresh","loadDiscoveryDocumentAndTryLogin","loadDiscoveryDocument","doc","tryLogin","loadDiscoveryDocumentAndLogin","hasValidAccessToken","initImplicitFlow","args","_i","arguments","validateUrlFromDiscoveryDocument","url","errors","httpsCheck","validateUrlForHttps","issuerCheck","validateUrlAgainstIssuer","lcUrl","toLowerCase","startsWith","clearAccessTokenTimer","clearIdTokenTimer","idTokenExp","getIdTokenExpiration","Number","MAX_VALUE","useAccessTokenExp","getAccessTokenExpiration","setupAccessTokenTimer","setupIdTokenTimer","expiration","storedAt","getAccessTokenStoredAt","timeout","calcTimeout","runOutsideAngular","accessTokenTimeoutSubscription","of","delay","run","getIdTokenStoredAt","idTokenTimeoutSubscription","unsubscribe","now","Date","delta","Math","max","_storage","fullUrl","endsWith","get","validateDiscoveryDocument","authorization_endpoint","end_session_endpoint","grant_types_supported","token_endpoint","userinfo_endpoint","jwksUri","jwks_uri","check_session_iframe","loadJwks","event","discoveryDocument","err","warn","fetchTokenUsingPasswordFlowAndLoadUserProfile","userName","password","headers","HttpHeaders","fetchTokenUsingPasswordFlow","loadUserProfile","set","getAccessToken","existingClaims","getIdentityClaims","sub","setItem","JSON","stringify","HttpParams","encoder","header","_b","tslib_1.__values","getOwnPropertyNames","_c","post","tokenResponse","storeAccessTokenResponse","access_token","refresh_token","expires_in","storeAdditionalParameters","getItem","switchMap","id_token","from","processIdToken","storeIdToken","removeSilentRefreshEventListener","silentRefreshPostMessageEventListener","removeEventListener","setupSilentRefreshEventListener","message","processMessageEventMessage","onLoginError","onTokenReceived","addEventListener","claims","getIdToken","document","existingIframe","getElementById","removeChild","silentRefreshSubject","iframe","createElement","id","createLoginUrl","setAttribute","style","appendChild","first","success","race","toPromise","initImplicitFlowInPopup","display","windowRef","open","calculatePopupFeatures","cleanup","listener","close","height","width","left","screen","expectedPrefix","prefixedMessage","canPerformSessionCheck","getSessionState","setupSessionCheckEventListener","removeSessionCheckEventListener","sessionCheckEventListener","origin","handleSessionUnchanged","handleSessionChange","handleSessionError","stopSessionCheckTimer","waitForSilentRefreshAfterSessionChange","logOut","startSessionCheckTimer","sessionCheckTimer","setInterval","checkSession","bind","clearInterval","sessionState","contentWindow","postMessage","loginHint","customRedirectUri","that","createAndSaveNonce","nonce","_h","seperationChar","createChallangeVerifierPairForPKCE","tslib_1.__read","challenge","verifier","_d","keys","_e","_f","_g","initImplicitFlowInternal","additionalState","addParams","resetImplicitFlow","callOnTokenReceivedIfExists","tokenParams","idClaims","idToken","expiresIn","grantedScopes","expiresInMilliSeconds","expiresAt","getTime","additionalParams","parse","tokenKeys","forEach","includes","tryLoginCodeFlow","tryLoginImplicitFlow","charAt","parts","search","code","history","replaceState","name","parseState","nonceInState","userState","handleLoginError","validateNonce","event_1","getTokenFromCode","pkciVerifier","fetchAndProcessToken","disableOAuth2StateCheck","event_2","fallbackAccessTokenExpirationTimeInSec","validationHandler","storeSessionState","idx","savedNonce","idTokenClaimsJson","idTokenExpiresAt","skipNonceCheck","tokenParts","headerJson","padBase64","claimsJson","isArray","aud","every","iat","iss","issuedAtMSec","expiresAtMSec","exp","clockSkewInMSec","clockSkewInSec","validationParams","loadKeys","checkAtHash","atHashValid","checkSignature","idTokenHeaderJson","getGrantedScopes","scopes","base64data","getRefreshToken","parseInt","getAdditionalParameters","authorizationHeader","noRedirectToLogoutUrl","removeItem","postLogoutUrl","createNonce","ngOnDestroy","size","self","bytes","getRandomValues","Uint8Array","random","validateSignature","initLoginFlow","initCodeFlow","initCodeFlowInternal","challengeRaw","NgZone","HttpClient","OAuthStorage","decorators","Optional","ValidationHandler","OAuthLogger","CryptoHandler","OAuthNoopResourceServerErrorHandler","handleError","throwError","DefaultOAuthInterceptor","authStorage","oAuthService","errorHandler","moduleConfig","checkUrl","resourceServer","customUrlValidation","allowedUrls","find","u","intercept","req","handle","sendAccessToken","merge","token","take","mergeMap","clone","catchError","OAuthResourceServerErrorHandler","OAuthModuleConfig","NullValidationHandler","createDefaultLogger","createDefaultStorage","JwksValidationHandler","allowedAlgorithms","gracePeriodInSec","retry","kid","kty_1","alg2kty","matchingKeys","loadedKeys","keyObj","rs.KEYUTIL","getKey","validationOptions","gracePeriod","rs.KJUR","jws","JWS","verifyJWT","valueToHash","algorithm","MessageDigest","digestString","byteArrayAsString","toByteArrayAsString","hexString","hexDigit","num","String","fromCharCode","OAuthModule","forRoot","validationHandlerClass","ngModule","providers","provide","useFactory","useClass","useValue","HTTP_INTERCEPTORS","multi","NgModule","imports","CommonModule","declarations","exports","AUTH_CONFIG","InjectionToken"],"mappings":"gjBAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAyC5E,SAASK,EAAUC,EAASC,EAAYC,EAAGC,GAC9C,OAAO,IAAKD,IAAMA,EAAIE,UAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,IAAW,MAAOG,GAAKL,EAAOK,IACpF,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,SAAEK,IAAW,MAAOG,GAAKL,EAAOK,IACvF,SAASF,EAAKI,GAAUA,EAAOC,KAAOT,EAAQQ,EAAOL,OAAS,IAAIN,EAAE,SAAUG,GAAWA,EAAQQ,EAAOL,SAAWO,KAAKR,EAAWK,GACnIH,GAAMN,EAAYA,EAAUa,MAAMhB,EAASC,GAAc,KAAKS,UAI/D,SAASO,EAAYjB,EAASkB,GACjC,IAAsGC,EAAGC,EAAGC,EAAGC,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPJ,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOK,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEZ,KAAMkB,EAAK,GAAIC,QAASD,EAAK,GAAIE,SAAUF,EAAK,IAAwB,mBAAXG,SAA0BT,EAAES,OAAOC,UAAY,WAAa,OAAOrC,OAAU2B,EACvJ,SAASM,EAAKK,GAAK,OAAO,SAAUC,GAAK,OACzC,SAAcC,GACV,GAAIhB,EAAG,MAAM,IAAIiB,UAAU,mCAC3B,KAAOb,GAAG,IACN,GAAIJ,EAAI,EAAGC,IAAMC,EAAY,EAARc,EAAG,GAASf,EAAU,UAAIe,EAAG,GAAKf,EAAS,YAAOC,EAAID,EAAU,YAAMC,EAAEgB,KAAKjB,GAAI,GAAKA,EAAEV,SAAWW,EAAIA,EAAEgB,KAAKjB,EAAGe,EAAG,KAAKrB,KAAM,OAAOO,EAE3J,OADID,EAAI,EAAGC,IAAGc,EAAK,CAAS,EAARA,EAAG,GAAQd,EAAEb,QACzB2B,EAAG,IACP,KAAK,EAAG,KAAK,EAAGd,EAAIc,EAAI,MACxB,KAAK,EAAc,OAAXZ,EAAEC,QAAgB,CAAEhB,MAAO2B,EAAG,GAAIrB,MAAM,GAChD,KAAK,EAAGS,EAAEC,QAASJ,EAAIe,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKZ,EAAEI,IAAIW,MAAOf,EAAEG,KAAKY,MAAO,SACxC,QACI,KAAkBjB,GAAZA,EAAIE,EAAEG,MAAYa,OAAS,GAAKlB,EAAEA,EAAEkB,OAAS,MAAkB,IAAVJ,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEZ,EAAI,EAAG,SACjG,GAAc,IAAVY,EAAG,MAAcd,GAAMc,EAAG,GAAKd,EAAE,IAAMc,EAAG,GAAKd,EAAE,IAAM,CAAEE,EAAEC,MAAQW,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYZ,EAAEC,MAAQH,EAAE,GAAI,CAAEE,EAAEC,MAAQH,EAAE,GAAIA,EAAIc,EAAI,MAC7D,GAAId,GAAKE,EAAEC,MAAQH,EAAE,GAAI,CAAEE,EAAEC,MAAQH,EAAE,GAAIE,EAAEI,IAAIa,KAAKL,GAAK,MACvDd,EAAE,IAAIE,EAAEI,IAAIW,MAChBf,EAAEG,KAAKY,MAAO,SAEtBH,EAAKjB,EAAKmB,KAAKrC,EAASuB,GAC1B,MAAOZ,GAAKwB,EAAK,CAAC,EAAGxB,GAAIS,EAAI,EAAI,QAAWD,EAAIE,EAAI,EACtD,GAAY,EAARc,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAE3B,MAAO2B,EAAG,GAAKA,EAAG,QAAK,EAAQrB,MAAM,GArB9BL,CAAK,CAACwB,EAAGC,MA6BtD,SAASO,EAASC,GACrB,IAAIC,EAAsB,mBAAXZ,QAAyBW,EAAEX,OAAOC,UAAWY,EAAI,EAChE,OAAID,EAAUA,EAAEN,KAAKK,GACd,CACHhC,KAAM,WAEF,OADIgC,GAAKE,GAAKF,EAAEH,SAAQG,OAAI,GACrB,CAAElC,MAAOkC,GAAKA,EAAEE,KAAM9B,MAAO4B,KAKzC,SAASG,EAAOH,EAAGT,GACtB,IAAIU,EAAsB,mBAAXZ,QAAyBW,EAAEX,OAAOC,UACjD,IAAKW,EAAG,OAAOD,EACf,IAAmBI,EAAYnC,EAA3BiC,EAAID,EAAEN,KAAKK,GAAOK,EAAK,GAC3B,IACI,WAAc,IAANd,GAAgBA,KAAM,MAAQa,EAAIF,EAAElC,QAAQI,MAAMiC,EAAGP,KAAKM,EAAEtC,OAExE,MAAOwC,GAASrC,EAAI,CAAEqC,MAAOA,GACjC,QACQ,IACQF,IAAMA,EAAEhC,OAAS6B,EAAIC,EAAU,YAAID,EAAEN,KAAKO,GAE1D,QAAkB,GAAIjC,EAAG,MAAMA,EAAEqC,OAE7B,OAAOD,EClIX,iBA+CA,OA/CA,WA8CEpD,KAAAsD,4BAA8B,mBAehC,OANA,6BAkBA,OAJA,6BAeA,OALA,gBCjFA,SAAgBC,EAAiBC,OACzBC,EAASD,EAAIE,QAAQ,MAAO,KAAKA,QAAQ,MAAO,KAEtD,OAAOC,mBACLC,KAAKH,GACFI,MAAM,IACNC,IAAG,SAAUC,GACZ,MAAO,KAAO,KAAOA,EAAEC,WAAW,GAAGC,SAAS,KAAKC,OAAO,KAE3DC,KAAK,KAIZ,SAAgBC,EAAgBZ,GAE9B,OADea,KAAKb,GAEjBE,QAAQ,MAAO,KACfA,QAAQ,MAAO,KACfA,QAAQ,KAAM,ICJnB,iBAYA,OAZA,6BAmBA,SAAAY,KAoDA,OA3CQA,EAAApE,UAAAqE,eAAN,SAAqBC,yGAGH,OAFZC,EAAUzE,KAAK0E,mBAAmBF,EAAOG,eAE7B,CAAA,EAAM3E,KAAK4E,SAASJ,EAAOK,YAAaJ,WAaxD,OAbIK,EAAYC,EAAAjD,OAEZkD,EAAeF,EAAUG,OAAO,EAAGH,EAAUlC,OAAS,GAEtDsC,EAASd,EAAgBY,GAEzBG,EAAeX,EAAOY,cAAuB,QAAE1B,QAAQ,KAAM,IAE7DwB,IAAWC,IACbE,QAAQhC,MAAM,sBAAwB6B,GACtCG,QAAQhC,MAAM,mBAAqB8B,IAGrC,CAAA,EAAOD,IAAWC,SASVb,EAAApE,UAAAwE,mBAAV,SAA6BY,OACvBC,EAAcD,EAAe,IAEjC,IAAKC,EAAIC,MAAM,gBACb,MAAM,IAAIC,MAAM,4BAA8BF,GAGhD,MAAO,OAASA,EAAIN,OAAO,IAW/BX,KCtFAoB,EAAA,WAEA,SAAAA,KA6DA,OA3DSA,EAAAxF,UAAAyF,sBAAP,SAA6BC,OACvBC,EAAOD,GAAsBE,OAAOC,SAASF,KAIjD,GAA0B,KAF1BA,EAAOlC,mBAAmBkC,IAEjBG,QAAQ,KACf,MAAO,OAGHC,EAAuBJ,EAAKG,QAAQ,KAQ1C,OALEH,EADEI,GAAwB,EACnBJ,EAAKZ,OAAOgB,EAAuB,GAEnCJ,EAAKZ,OAAO,GAGdjF,KAAKkG,iBAAiBL,IAGxBH,EAAAxF,UAAAgG,iBAAP,SAAwBC,OAGpBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA5F,EARI6F,EAAO,GAUb,GAAoB,OAAhBP,EACF,OAAOO,EAGTN,EAAQD,EAAYtC,MAAM,KAE1B,IAAK,IAAIZ,EAAI,EAAGA,EAAImD,EAAMxD,OAAQK,KAIR,KAFxBqD,GADAD,EAAOD,EAAMnD,IACS+C,QAAQ,OAG5BO,EAAaF,EACbG,EAAe,OAEfD,EAAaF,EAAKpB,OAAO,EAAGqB,GAC5BE,EAAeH,EAAKpB,OAAOqB,EAAiB,IAG9CG,EAAM9C,mBAAmB4C,GACzB1F,EAAQ8C,mBAAmB6C,GAEF,MAArBC,EAAIxB,OAAO,EAAG,KAAcwB,EAAMA,EAAIxB,OAAO,IAEjDyB,EAAKD,GAAO5F,EAGd,OAAO6F,uBA3DVC,EAAAA,aA6DDjB,EA/DA,gBC0BA,OADE,SAAqBkB,GAAA5G,KAAA4G,KAAAA,oBAIrB,SAAAC,EAAYD,EAA0BE,QAAA,IAAAA,IAAAA,EAAA,MAAtC,IAAAC,EACEC,EAAAtE,KAAA1C,KAAM4G,IAAK5G,YADyB+G,EAAAD,KAAAA,IAGxC,OAJuCG,EAAAA,EAAAA,GAIvCJ,GAJuCK,iBAOrC,SAAAC,EAAYP,EAA0BE,QAAA,IAAAA,IAAAA,EAAA,MAAtC,IAAAC,EACEC,EAAAtE,KAAA1C,KAAM4G,IAAK5G,YADyB+G,EAAAD,KAAAA,IAGxC,OAJoCG,EAAAA,EAAAA,GAIpCE,GAJoCD,iBAOlC,SAAAE,EACER,EACSS,EACA7C,QAAA,IAAAA,IAAAA,EAAA,MAHX,IAAAuC,EAKEC,EAAAtE,KAAA1C,KAAM4G,IAAK5G,YAHF+G,EAAAM,OAAAA,EACAN,EAAAvC,OAAAA,IAIb,OARqCyC,EAAAA,EAAAA,GAQrCG,GARqCF,GCxCrCI,EAAA,WAoPA,OAdE,SAAYC,GAlOLvH,KAAAwH,SAAY,GAKZxH,KAAAyH,YAAe,GAMfzH,KAAA0H,sBAAyB,GAMzB1H,KAAA2H,SAAY,GAKZ3H,KAAA4H,MAAS,iBAET5H,KAAA6H,SAAY,GAEZ7H,KAAA8H,OAAU,GAMV9H,KAAA+H,MAAQ,EAMR/H,KAAAgI,oBAAsB,EAEtBhI,KAAAiI,QAAgB,KAKhBjI,KAAAkI,OAAU,GAKVlI,KAAAmI,UAAa,GAKbnI,KAAAoI,qBAAuB,EAKvBpI,KAAAqI,cAAyB,KAKzBrI,KAAAsI,iBAA4B,KAE5BtI,KAAAuI,aAAgB,GAQfvI,KAAAwI,sBAAwB,EAKzBxI,KAAAyI,yBAA4B,GAE5BzI,KAAA0I,2BAA8B,GAM9B1I,KAAA2I,yBAA2B,EAO3B3I,KAAA4I,oBAA+B,IAK/B5I,KAAA6I,qBAAgC,IAUhC7I,KAAA8I,kBAA6B,KAQ7B9I,KAAA+I,aAAwC,aAMxC/I,KAAAgJ,mCAAqC,EAOrChJ,KAAAiJ,KAAgB,KAMhBjJ,KAAAkJ,kBAA6B,KAE7BlJ,KAAAmJ,wBAA2B,2CAO3BnJ,KAAAoJ,cAAiB,IAOjBpJ,KAAAqJ,sBAAwB,EAMxBrJ,KAAAsJ,sBAAyB,IAKzBtJ,KAAAuJ,sBAAiC,KAKjCvJ,KAAAwJ,uBAA0B,0CAS1BxJ,KAAAyJ,oBAAsB,EAMtBzJ,KAAA0J,kBAAoB,EAEpB1J,KAAA2J,gCAAkC,EAMlC3J,KAAA4J,iBAAmB,EAenB5J,KAAA6J,oBAAuB,IAKvB7J,KAAA8J,kBAAoB,EAYpB9J,KAAA+J,aAAe,EAaf/J,KAAAgK,QAAO,SAA6BC,GACzClE,SAASmE,KAAOD,GAXZ1C,GACF/H,OAAO2K,OAAOnK,KAAMuH,IAxO1B,gBCIA,SAAA6C,KAgBA,OAfEA,EAAAlK,UAAAmK,UAAA,SAAUC,GACR,OAAOC,mBAAmBD,IAG5BF,EAAAlK,UAAAsK,YAAA,SAAYjI,GACV,OAAOgI,mBAAmBhI,IAG5B6H,EAAAlK,UAAAuK,UAAA,SAAUH,GACR,OAAO3G,mBAAmB2G,IAG5BF,EAAAlK,UAAAwK,YAAA,SAAYnI,GACV,OAAOoB,mBAAmBpB,IAE9B6H,kBCbA,OAJA,gBCgCAO,EAAA,SAAA3D,GAgDI,SAAA2D,EACcC,EACAC,EACEC,EACAC,EACUC,EACZC,EACAC,EACYC,GAR1B,IAAApE,EAUIC,EAAAtE,KAAA1C,OAAOA,KATG+G,EAAA6D,OAAAA,EACA7D,EAAA8D,KAAAA,EAGY9D,EAAAiE,OAAAA,EACZjE,EAAAkE,UAAAA,EACAlE,EAAAmE,OAAAA,EACYnE,EAAAoE,OAAAA,EAzCnBpE,EAAAqE,yBAA0B,EAkB1BrE,EAAAsE,MAAS,GAENtE,EAAAuE,cAAqC,IAAIC,EAAAA,QACzCxE,EAAAyE,+BAAkD,IAAID,EAAAA,QAEtDxE,EAAA0E,oBAAqC,GAQrC1E,EAAA2E,gBAAiB,EAcvB3E,EAAK4E,MAAM,+BAEX5E,EAAK6E,yBAA2B7E,EAAKyE,+BAA+BK,eACpE9E,EAAK+E,OAAS/E,EAAKuE,cAAcO,eAE7Bd,IACAhE,EAAKgE,uBAAyBA,GAG9BC,GACAjE,EAAKgF,UAAUf,GAGnB,IACQF,EACA/D,EAAKiF,WAAWlB,GACiB,oBAAnBmB,gBACdlF,EAAKiF,WAAWC,gBAEtB,MAAOjL,GAELqE,QAAQhC,MACJ,8IAEArC,UAIR+F,EAAKmF,sBAwjEb,OA/oEkCjF,EAAAA,EAAAA,GA8FvB0D,EAAAzK,UAAA6L,UAAP,SAAiBf,GAGbxL,OAAO2K,OAAOnK,KAAM,IAAIsH,EAAc0D,GAEtChL,KAAKgL,OAASxL,OAAO2K,OAAM,GAAmB,IAAI7C,EAAc0D,GAE5DhL,KAAKqJ,sBACLrJ,KAAKmM,oBAGTnM,KAAKoM,iBAGCzB,EAAAzK,UAAAkM,cAAV,WACIpM,KAAKkM,qBAGFvB,EAAAzK,UAAAmM,oCAAP,WACQrM,KAAKsM,mBACLtM,KAAKuM,oBAIH5B,EAAAzK,UAAAsM,mCAAV,WACIxM,KAAKyM,yBAGC9B,EAAAzK,UAAAiM,kBAAV,WAAA,IAAApF,EAAA/G,KACIA,KAAK8L,OAAOY,KAAKC,EAAAA,OAAM,SAAC3L,GAAK,MAAW,mBAAXA,EAAE4F,QAA4BgG,UAAS,SAAC5L,GACjE+F,EAAKwF,sBAYN5B,EAAAzK,UAAA2M,4BAAP,SAAmCrI,EAAqBsI,EAAgDC,GAAxG,IAAAhG,EAAA/G,UAAmC,IAAAwE,IAAAA,EAAA,SAAqE,IAAAuI,IAAAA,GAAA,OAClGC,GAAyB,EAC7BhN,KAAK8L,OAAOY,KACVO,EAAAA,IAAG,SAAEjM,GACY,mBAAXA,EAAE4F,KACJoG,GAAyB,EACL,WAAXhM,EAAE4F,OACXoG,GAAyB,KAG7BL,EAAAA,OAAM,SAAC3L,GAAK,MAAW,kBAAXA,EAAE4F,QACdgG,UAAS,SAAC5L,GAEO,MAAZ8L,GAAiC,QAAbA,GADd,EAC0ChG,OAASgG,IAAaE,GAEzEjG,EAAKmG,gBAAgB1I,EAAQuI,GAAUI,SAAK,SAACvL,GAC3CmF,EAAK4E,MAAM,6CAKjB3L,KAAKwM,sCAGG7B,EAAAzK,UAAAgN,gBAAV,SAA0B1I,EAAQuI,GAC9B,MAA0B,SAAtB/M,KAAKuI,aACEvI,KAAKoN,eAELpN,KAAKqN,cAAc7I,EAAQuI,IAWnCpC,EAAAzK,UAAAoN,iCAAP,SAAwCrF,GAAxC,IAAAlB,EAAA/G,KACI,YADoC,IAAAiI,IAAAA,EAAA,MAC7BjI,KAAKuN,wBAAwBnM,KAAI,SAACoM,GACrC,OAAOzG,EAAK0G,SAASxF,MAWtB0C,EAAAzK,UAAAwN,8BAAP,SAAqCzF,GAArC,IAAAlB,EAAA/G,KACI,YADiC,IAAAiI,IAAAA,EAAA,MAC1BjI,KAAKsN,iCAAiCrF,GAAS7G,KAAI,SAACQ,GACvD,SAAKmF,EAAKuF,oBAAsBvF,EAAK4G,yBACjC5G,EAAK6G,oBACE,MAOTjD,EAAAzK,UAAAyL,MAAV,eAAgB,IAAAkC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAnL,OAAAkL,IAAAD,EAAAC,GAAAC,UAAAD,GACR9N,KAAKwI,sBACLxI,KAAKkL,OAAOS,MAAMtK,MAAMgE,QAASwI,IAI/BlD,EAAAzK,UAAA8N,iCAAV,SAA2CC,OACjCC,EAAmB,GACnBC,EAAanO,KAAKoO,oBAAoBH,GACtCI,EAAcrO,KAAKsO,yBAAyBL,GAelD,OAbKE,GACDD,EAAOrL,KACH,qEAIHwL,GACDH,EAAOrL,KACH,yHAKDqL,GAGDvD,EAAAzK,UAAAkO,oBAAV,SAA8BH,GAC1B,IAAKA,EACD,OAAO,MAGLM,EAAQN,EAAIO,cAElB,OAA0B,IAAtBxO,KAAK+I,kBAKJwF,EAAM/I,MAAM,kCACT+I,EAAM/I,MAAM,iCACM,eAAtBxF,KAAK+I,eAKFwF,EAAME,WAAW,cAGlB9D,EAAAzK,UAAAoO,yBAAV,SAAmCL,GAC/B,OAAKjO,KAAKgJ,qCAGLiF,GAGEA,EAAIO,cAAcC,WAAWzO,KAAKkI,OAAOsG,iBAG1C7D,EAAAzK,UAAAgM,kBAAV,WAAA,IAAAnF,EAAA/G,KAC0B,oBAAX8F,QAKP9F,KAAKsM,oBACLtM,KAAK0O,wBACL1O,KAAK2O,oBACL3O,KAAKyM,yBAGTzM,KAAK8L,OAAOY,KAAKC,EAAAA,OAAM,SAAC3L,GAAK,MAAW,mBAAXA,EAAE4F,QAA4BgG,UAAS,SAAChL,GACjEmF,EAAK2H,wBACL3H,EAAK4H,oBACL5H,EAAK0F,2BAbLzM,KAAK2L,MAAM,0CAiBThB,EAAAzK,UAAAuM,sBAAV,eACUmC,EAAa5O,KAAK6O,wBAA0BC,OAAOC,UAEnDC,GADiBhP,KAAKiP,4BAA8BH,OAAOC,YACrBH,EAExC5O,KAAK2N,uBAAyBqB,GAC9BhP,KAAKkP,wBAGLlP,KAAKsM,oBAAsB0C,GAC3BhP,KAAKmP,qBAIHxE,EAAAzK,UAAAgP,sBAAV,WAAA,IAAAnI,EAAA/G,KACUoP,EAAapP,KAAKiP,2BAClBI,EAAWrP,KAAKsP,yBAChBC,EAAUvP,KAAKwP,YAAYH,EAAUD,GAE3CpP,KAAK4K,OAAO6E,kBAAiB,WACzB1I,EAAK2I,+BAAiCC,EAAAA,GAClC,IAAIxI,EAAe,gBAAiB,iBAEnCuF,KAAKkD,EAAAA,MAAML,IACX3C,UAAS,SAAC5L,GACP+F,EAAK6D,OAAOiF,IAAG,WACX9I,EAAKuE,cAAcvK,KAAKC,UAMlC2J,EAAAzK,UAAAiP,kBAAV,WAAA,IAAApI,EAAA/G,KACUoP,EAAapP,KAAK6O,uBAClBQ,EAAWrP,KAAK8P,qBAChBP,EAAUvP,KAAKwP,YAAYH,EAAUD,GAE3CpP,KAAK4K,OAAO6E,kBAAiB,WACzB1I,EAAKgJ,2BAA6BJ,EAAAA,GAC9B,IAAIxI,EAAe,gBAAiB,aAEnCuF,KAAKkD,EAAAA,MAAML,IACX3C,UAAS,SAAC5L,GACP+F,EAAK6D,OAAOiF,IAAG,WACX9I,EAAKuE,cAAcvK,KAAKC,UAMlC2J,EAAAzK,UAAAwO,sBAAV,WACQ1O,KAAK0P,gCACL1P,KAAK0P,+BAA+BM,eAIlCrF,EAAAzK,UAAAyO,kBAAV,WACQ3O,KAAK+P,4BACL/P,KAAK+P,2BAA2BC,eAI9BrF,EAAAzK,UAAAsP,YAAV,SAAsBH,EAAkBD,OAC9Ba,EAAMC,KAAKD,MACXE,GAASf,EAAaC,GAAYrP,KAAKoJ,eAAiB6G,EAAMZ,GACpE,OAAOe,KAAKC,IAAI,EAAGF,IAehBxF,EAAAzK,UAAA8L,WAAP,SAAkBlB,GACd9K,KAAKsQ,SAAWxF,EAChB9K,KAAKoM,iBAYFzB,EAAAzK,UAAAqN,sBAAP,SAA6BgD,GAA7B,IAAAxJ,EAAA/G,KACI,YADyB,IAAAuQ,IAAAA,EAAA,MAClB,IAAI9P,QAAO,SAAEC,EAASC,GACpB4P,KACDA,EAAUxJ,EAAKmB,QAAU,IACZsI,SAAS,OAClBD,GAAW,KAEfA,GAAW,oCAGVxJ,EAAKqH,oBAAoBmC,GAK9BxJ,EAAK8D,KAAK4F,IAAsBF,GAAS3D,UAAS,SAC9CY,GACI,IAAKzG,EAAK2J,0BAA0BlD,GAKhC,OAJAzG,EAAKuE,cAAcvK,KACf,IAAIqG,EAAgB,sCAAuC,YAE/DzG,EAAO,uCAIXoG,EAAKY,SAAW6F,EAAImD,uBACpB5J,EAAKoB,UAAYqF,EAAIoD,sBAAwB7J,EAAKoB,UAClDpB,EAAK0E,oBAAsB+B,EAAIqD,sBAC/B9J,EAAKmB,OAASsF,EAAItF,OAClBnB,EAAKsB,cAAgBmF,EAAIsD,eACzB/J,EAAKuB,iBAAmBkF,EAAIuD,kBAC5BhK,EAAKiK,QAAUxD,EAAIyD,SACnBlK,EAAKwC,sBAAwBiE,EAAI0D,sBAAwBnK,EAAKwC,sBAE9DxC,EAAKqE,yBAA0B,EAC/BrE,EAAKyE,+BAA+BzK,KAAKyM,GAErCzG,EAAKsC,sBACLtC,EAAKsF,sCAGTtF,EAAKoK,WACA/P,KAAI,SAAC6H,OAMImI,EAAQ,IAAIvK,EACd,4BANmB,CACnBwK,kBAAmB7D,EACnBvE,KAAMA,IAOVlC,EAAKuE,cAAcvK,KAAKqQ,GACxB1Q,EAAQ0Q,KAGXjE,SAAK,SAACmE,GACHvK,EAAKuE,cAAcvK,KACf,IAAIqG,EAAgB,gCAAiCkK,IAEzD3Q,EAAO2Q,MAGlB,SACDA,GACIvK,EAAKmE,OAAO7H,MAAM,mCAAoCiO,GACtDvK,EAAKuE,cAAcvK,KACf,IAAIqG,EAAgB,gCAAiCkK,IAEzD3Q,EAAO2Q,KA1DX3Q,EAAO,uFAgETgK,EAAAzK,UAAAiR,SAAV,WAAA,IAAApK,EAAA/G,KACI,OAAO,IAAIS,QAAO,SAAUC,EAASC,GAC7BoG,EAAKiK,QACLjK,EAAK8D,KAAK4F,IAAI1J,EAAKiK,SAASpE,UAAS,SACjC3D,GACIlC,EAAKkC,KAAOA,EACZlC,EAAKuE,cAAcvK,KACf,IAAI8F,EAAkB,8BAE1BnG,EAAQuI,IACX,SACDqI,GACIvK,EAAKmE,OAAO7H,MAAM,qBAAsBiO,GACxCvK,EAAKuE,cAAcvK,KACf,IAAIqG,EAAgB,kBAAmBkK,IAE3C3Q,EAAO2Q,KAIf5Q,EAAQ,SAKViK,EAAAzK,UAAAwQ,0BAAV,SAAoClD,OAC5BU,EAEJ,OAAKlO,KAAK4J,iBAAmB4D,EAAItF,SAAWlI,KAAKkI,QASjDgG,EAASlO,KAAKgO,iCAAiCR,EAAImD,yBACxC/N,OAAS,GAChB5C,KAAKkL,OAAO7H,MACR,gEACA6K,IAEG,IAGXA,EAASlO,KAAKgO,iCAAiCR,EAAIoD,uBACxChO,OAAS,GAChB5C,KAAKkL,OAAO7H,MACR,8DACA6K,IAEG,KAGXA,EAASlO,KAAKgO,iCAAiCR,EAAIsD,iBACxClO,OAAS,GAChB5C,KAAKkL,OAAO7H,MACR,wDACA6K,IAIRA,EAASlO,KAAKgO,iCAAiCR,EAAIuD,oBACxCnO,OAAS,GAChB5C,KAAKkL,OAAO7H,MACR,2DACA6K,IAEG,IAGXA,EAASlO,KAAKgO,iCAAiCR,EAAIyD,WACxCrO,OAAS,GAChB5C,KAAKkL,OAAO7H,MAAM,kDAAmD6K,IAC9D,IAGPlO,KAAKqJ,uBAAyBmE,EAAI0D,sBAClClR,KAAKkL,OAAOqG,KACR,2GAKD,KAxDHvR,KAAKkL,OAAO7H,MACR,uCACA,aAAerD,KAAKkI,OACpB,YAAcsF,EAAItF,SAEf,IAoERyC,EAAAzK,UAAAsR,8CAAP,SACIC,EACAC,EACAC,GAHJ,IAAA5K,EAAA/G,KAKI,YAFA,IAAA2R,IAAAA,EAAA,IAA2BC,EAAAA,aAEpB5R,KAAK6R,4BAA4BJ,EAAUC,EAAUC,GAASvQ,KAAI,WAC/D,OAAA2F,EAAK+K,qBAUZnH,EAAAzK,UAAA4R,gBAAP,WAAA,IAAA/K,EAAA/G,KACI,IAAKA,KAAK2N,sBACN,MAAM,IAAIlI,MAAM,kDAEpB,IAAKzF,KAAKoO,oBAAoBpO,KAAKsI,kBAC/B,MAAM,IAAI7C,MACN,8FAIR,OAAO,IAAIhF,QAAO,SAAEC,EAASC,OACnBgR,GAAU,IAAIC,EAAAA,aAAcG,IAC9B,gBACA,UAAYhL,EAAKiL,kBAGrBjL,EAAK8D,KAAK4F,IAAc1J,EAAKuB,iBAAkB,CAAEqJ,QAAOA,IAAI/E,UAAS,SACjE9F,GACIC,EAAK4E,MAAM,oBAAqB7E,OAE1BmL,EAAiBlL,EAAKmL,qBAAuB,GAEnD,GAAKnL,EAAK2C,mBAEF3C,EAAKgB,MACHkK,EAAoB,KAAKnL,EAAKqL,MAAQF,EAAoB,IAYpEnL,EAAOtH,OAAO2K,OAAO,GAAI8H,EAAgBnL,GAEzCC,EAAKuJ,SAAS8B,QAAQ,sBAAuBC,KAAKC,UAAUxL,IAC5DC,EAAKuE,cAAcvK,KAAK,IAAI8F,EAAkB,wBAC9CnG,EAAQoG,OAnBR,CAUQnG,EAJI,qMAcf,SACD2Q,GACIvK,EAAKmE,OAAO7H,MAAM,0BAA2BiO,GAC7CvK,EAAKuE,cAAcvK,KACf,IAAIqG,EAAgB,0BAA2BkK,IAEnD3Q,EAAO2Q,QAYhB3G,EAAAzK,UAAA2R,4BAAP,SACIJ,EACAC,EACAC,GAHJ,IAAA5K,EAAA/G,KAKI,QAFA,IAAA2R,IAAAA,EAAA,IAA2BC,EAAAA,cAEtB5R,KAAKoO,oBAAoBpO,KAAKqI,eAC/B,MAAM,IAAI5C,MACN,2FAIR,OAAO,IAAIhF,QAAO,SAAEC,EAASC,WAOrB6D,EAAS,IAAI+N,EAAAA,WAAW,CAAEC,QAAS,IAAIpI,IACtC2H,IAAI,aAAc,YAClBA,IAAI,QAAShL,EAAKa,OAClBmK,IAAI,WAAYN,GAChBM,IAAI,WAAYL,GAErB,GAAI3K,EAAK+C,iBAAkB,KACjB2I,EAASpO,KAAQ0C,EAAKS,SAAQ,IAAIT,EAAK+B,mBAC7C6I,EAAUA,EAAQI,IACd,gBACA,SAAWU,GAWnB,GARK1L,EAAK+C,mBACNtF,EAASA,EAAOuN,IAAI,YAAahL,EAAKS,YAGrCT,EAAK+C,kBAAoB/C,EAAK+B,oBAC/BtE,EAASA,EAAOuN,IAAI,gBAAiBhL,EAAK+B,oBAG1C/B,EAAKmC,sBACL,IAAkB,IAAAwJ,EAAAC,EAAAnT,OAAOoT,oBAAoB7L,EAAKmC,oBAAkB2J,EAAAH,EAAA3R,QAAA8R,EAAA1R,KAAA0R,EAAAH,EAAA3R,OAAE,CAAjE,IAAM0F,EAAGoM,EAAAhS,MACV2D,EAASA,EAAOuN,IAAItL,EAAKM,EAAKmC,kBAAkBzC,yGAIxDkL,EAAUA,EAAQI,IACd,eACA,qCAGJhL,EAAK8D,KACAiI,KAAoB/L,EAAKsB,cAAe7D,EAAQ,CAAEmN,QAAOA,IACzD/E,UAAS,SACNmG,GACIhM,EAAK4E,MAAM,gBAAiBoH,GAC5BhM,EAAKiM,yBACDD,EAAcE,aACdF,EAAcG,cACdH,EAAcI,WACdJ,EAAcnL,OAGlBb,EAAKqM,0BAA0BL,GAE/BhM,EAAKuE,cAAcvK,KAAK,IAAI8F,EAAkB,mBAC9CnG,EAAQqS,IACX,SACDzB,GACIvK,EAAKmE,OAAO7H,MAAM,iCAAkCiO,GACpDvK,EAAKuE,cAAcvK,KAAK,IAAIqG,EAAgB,cAAekK,IAC3D3Q,EAAO2Q,QAapB3G,EAAAzK,UAAAkN,aAAP,WAAA,IAAArG,EAAA/G,KAEI,IAAKA,KAAKoO,oBAAoBpO,KAAKqI,eAC/B,MAAM,IAAI5C,MACN,2FAIR,OAAO,IAAIhF,QAAO,SAAEC,EAASC,WACrB6D,GAAS,IAAI+N,EAAAA,YACZR,IAAI,aAAc,iBAClBA,IAAI,YAAahL,EAAKS,UACtBuK,IAAI,QAAShL,EAAKa,OAClBmK,IAAI,gBAAiBhL,EAAKuJ,SAAS+C,QAAQ,kBAMhD,GAJItM,EAAK+B,oBACLtE,EAASA,EAAOuN,IAAI,gBAAiBhL,EAAK+B,oBAG1C/B,EAAKmC,sBACL,IAAkB,IAAAwJ,EAAAC,EAAAnT,OAAOoT,oBAAoB7L,EAAKmC,oBAAkB2J,EAAAH,EAAA3R,QAAA8R,EAAA1R,KAAA0R,EAAAH,EAAA3R,OAAE,CAAjE,IAAM0F,EAAGoM,EAAAhS,MACV2D,EAASA,EAAOuN,IAAItL,EAAKM,EAAKmC,kBAAkBzC,6GAIlDkL,GAAU,IAAIC,EAAAA,aAAcG,IAC9B,eACA,qCAGJhL,EAAK8D,KACAiI,KAAoB/L,EAAKsB,cAAe7D,EAAQ,CAAEmN,QAAOA,IACzDjF,KAAK4G,EAAAA,UAAS,SAACP,GACZ,OAAIA,EAAcQ,SACPC,EAAAA,KAAKzM,EAAK0M,eAAeV,EAAcQ,SAAUR,EAAcE,cAAc,IAC/EvG,KACGO,EAAAA,IAAG,SAAC/L,GAAU,OAAA6F,EAAK2M,aAAaxS,KAChC4C,EAAAA,IAAG,SAAClC,GAAK,OAAAmR,KAIVpD,EAAAA,GAAGoD,MAGjBnG,UAAS,SACNmG,GACIhM,EAAK4E,MAAM,wBAAyBoH,GACpChM,EAAKiM,yBACDD,EAAcE,aACdF,EAAcG,cACdH,EAAcI,WACdJ,EAAcnL,OAGlBb,EAAKqM,0BAA0BL,GAE/BhM,EAAKuE,cAAcvK,KAAK,IAAI8F,EAAkB,mBAC9CE,EAAKuE,cAAcvK,KAAK,IAAI8F,EAAkB,oBAC9CnG,EAAQqS,IACX,SACDzB,GACIvK,EAAKmE,OAAO7H,MAAM,iCAAkCiO,GACpDvK,EAAKuE,cAAcvK,KACf,IAAIqG,EAAgB,sBAAuBkK,IAE/C3Q,EAAO2Q,QAMjB3G,EAAAzK,UAAAyT,iCAAV,WACQ3T,KAAK4T,wCACL9N,OAAO+N,oBACH,UACA7T,KAAK4T,uCAET5T,KAAK4T,sCAAwC,OAI3CjJ,EAAAzK,UAAA4T,gCAAV,WAAA,IAAA/M,EAAA/G,KACIA,KAAK2T,mCAEL3T,KAAK4T,sCAAqC,SAAI5S,OACpC+S,EAAUhN,EAAKiN,2BAA2BhT,GAEhD+F,EAAK0G,SAAS,CACV7H,mBAAoBmO,EACpBzQ,4BAA4B,EAC5B2Q,aAAY,SAAE3C,GACVvK,EAAKuE,cAAcvK,KACf,IAAIqG,EAAgB,uBAAwBkK,KAGpD4C,gBAAe,WACXnN,EAAKuE,cAAcvK,KAAK,IAAI8F,EAAkB,0BAEnDsG,SAAK,SAACmE,GAAO,OAAAvK,EAAK4E,MAAM,wCAAyC2F,MAGxExL,OAAOqO,iBACH,UACAnU,KAAK4T,wCASNjJ,EAAAzK,UAAAmN,cAAP,SAAqB7I,EAAqBuI,GAA1C,IAAAhG,EAAA/G,UAAqB,IAAAwE,IAAAA,EAAA,SAAqB,IAAAuI,IAAAA,GAAA,OAChCqH,EAAiBpU,KAAKkS,qBAAuB,GAMnD,GAJIlS,KAAK2J,gCAAkC3J,KAAKsM,oBAC5C9H,EAAsB,cAAIxE,KAAKqU,eAG9BrU,KAAKoO,oBAAoBpO,KAAK2H,UAC/B,MAAM,IAAIlC,MACN,2FAIR,GAAwB,oBAAb6O,SACP,MAAM,IAAI7O,MAAM,wDAGd8O,EAAiBD,SAASE,eAC5BxU,KAAKmJ,yBAGLoL,GACAD,SAAS/S,KAAKkT,YAAYF,GAG9BvU,KAAK0U,qBAAuBN,EAAY,QAElCO,EAASL,SAASM,cAAc,UACtCD,EAAOE,GAAK7U,KAAKmJ,wBAEjBnJ,KAAK8T,sCAECrM,EAAczH,KAAKyI,0BAA4BzI,KAAKyH,YAC1DzH,KAAK8U,eAAe,KAAM,KAAMrN,EAAasF,EAAUvI,GAAQpD,KAAI,SAAC6M,GAChE0G,EAAOI,aAAa,MAAO9G,GAEtBlH,EAAK4B,0BACNgM,EAAOK,MAAe,QAAI,QAE9BV,SAAS/S,KAAK0T,YAAYN,SAGxBzG,EAASlO,KAAK8L,OAAOY,KACvBC,EAAAA,OAAM,SAAC3L,GAAK,OAAAA,aAAaoG,IACzB8N,EAAAA,SAEEC,EAAUnV,KAAK8L,OAAOY,KACxBC,EAAAA,OAAM,SAAC3L,GAAK,MAAW,uBAAXA,EAAE4F,OACdsO,EAAAA,SAEE3F,EAAUI,EAAAA,GACZ,IAAIvI,EAAgB,yBAA0B,OAChDsF,KAAKkD,EAAAA,MAAM5P,KAAK6I,uBAElB,OAAOuM,EAAAA,KAAK,CAAClH,EAAQiH,EAAS5F,IACzB7C,KACGO,EAAAA,IAAG,SAACjM,GACe,2BAAXA,EAAE4F,MACFG,EAAKuE,cAAcvK,KAAKC,KAGhC8C,EAAAA,IAAG,SAAC9C,GACA,GAAIA,aAAaoG,EACb,MAAMpG,EAEV,OAAOA,KAGdqU,aAGF1K,EAAAzK,UAAAoV,wBAAP,SAA+BrN,GAA/B,IAAAlB,EAAA/G,KAEI,OADAiI,EAAUA,GAAW,GACdjI,KAAK8U,eAAe,KAAM,KAAM9U,KAAKyI,0BAA0B,EAAO,CACzE8M,QAAS,UACVnU,KAAI,SAAC6M,GACJ,OAAO,IAAIxN,QAAO,SAAEC,EAASC,OACrB6U,EAAY1P,OAAO2P,KAAKxH,EAAK,SAAUlH,EAAK2O,uBAAuBzN,IAEjE0N,EAAO,WACT7P,OAAO+N,oBAAoB,UAAW+B,GACtCJ,EAAUK,QACVL,EAAY,MAGVI,EAAQ,SAAI5U,OACR+S,EAAUhN,EAAKiN,2BAA2BhT,GAEhD+F,EAAK0G,SAAS,CACV7H,mBAAoBmO,EACpBzQ,4BAA4B,IAC7BlC,KAAI,WACHuU,IACAjV,KACH,SAAE4Q,GACCqE,IACAhV,EAAO2Q,MAIfxL,OAAOqO,iBAAiB,UAAWyB,QAKrCjL,EAAAzK,UAAAwV,uBAAV,SAAiCzN,OAEvB6N,EAAS7N,EAAQ6N,QAAU,IAC3BC,EAAQ9N,EAAQ8N,OAAS,IACzBC,EAAQC,OAAOF,MAAQ,EAAMA,EAAQ,EAE3C,MAAO,gCAAgCA,EAAK,WAAWD,EAAM,SADhDG,OAAOH,OAAS,EAAMA,EAAS,GAC4B,SAASE,GAG3ErL,EAAAzK,UAAA8T,2BAAV,SAAqChT,OAC7BkV,EAAiB,IAMrB,GAJIlW,KAAK0I,6BACLwN,GAAkBlW,KAAK0I,4BAGtB1H,GAAMA,EAAE0F,MAA0B,iBAAX1F,EAAE0F,KAA9B,KAIMyP,EAA0BnV,EAAE0F,KAElC,GAAKyP,EAAgB1H,WAAWyH,GAIhC,MAAO,IAAMC,EAAgBlR,OAAOiR,EAAetT,UAG7C+H,EAAAzK,UAAAkW,uBAAV,WACI,QAAKpW,KAAKqJ,uBAGLrJ,KAAKuJ,sBAMWvJ,KAAKqW,kBAOF,oBAAb/B,UALPjP,QAAQkM,KACJ,oEAEG,IAVPlM,QAAQkM,KACJ,4EAEG,KAgBL5G,EAAAzK,UAAAoW,+BAAV,WAAA,IAAAvP,EAAA/G,KACIA,KAAKuW,kCAELvW,KAAKwW,0BAAyB,SAAIxV,OACxByV,EAASzV,EAAEyV,OAAOjI,cAClBtG,EAASnB,EAAKmB,OAAOsG,cAe3B,OAbAzH,EAAK4E,MAAM,6BAENzD,EAAOuG,WAAWgI,IACnB1P,EAAK4E,MACD,4BACA,eACA8K,EACA,WACAvO,GAKAlH,EAAE0F,MACN,IAAK,YACDK,EAAK2P,yBACL,MACJ,IAAK,UACD3P,EAAK6D,OAAOiF,IAAG,WACX9I,EAAK4P,wBAET,MACJ,IAAK,QACD5P,EAAK6D,OAAOiF,IAAG,WACX9I,EAAK6P,uBAKjB7P,EAAK4E,MAAM,sCAAuC3K,IAItDhB,KAAK4K,OAAO6E,kBAAiB,WACzB3J,OAAOqO,iBAAiB,UAAWpN,EAAKyP,8BAItC7L,EAAAzK,UAAAwW,uBAAV,WACI1W,KAAK2L,MAAM,gBAAiB,sBAGtBhB,EAAAzK,UAAAyW,oBAAV,WAAA,IAAA5P,EAAA/G,KAEIA,KAAKsL,cAAcvK,KAAK,IAAIoG,EAAe,oBAC3CnH,KAAK6W,wBACD7W,KAAKyI,0BACLzI,KAAKqN,gBAAgBF,SAAK,SAACvL,GACvB,OAAAmF,EAAK4E,MAAM,iDAEf3L,KAAK8W,2CAEL9W,KAAKsL,cAAcvK,KAAK,IAAIoG,EAAe,uBAC3CnH,KAAK+W,QAAO,KAIVpM,EAAAzK,UAAA4W,uCAAV,WAAA,IAAA/P,EAAA/G,KACIA,KAAK8L,OACAY,KACGC,EAAAA,OAAM,SACD3L,GACG,MAAW,uBAAXA,EAAE4F,MACS,2BAAX5F,EAAE4F,MACS,yBAAX5F,EAAE4F,OAEVsO,EAAAA,SAEHtI,UAAS,SAAC5L,GACQ,uBAAXA,EAAE4F,OACFG,EAAK4E,MAAM,qDACX5E,EAAKuE,cAAcvK,KAAK,IAAIoG,EAAe,uBAC3CJ,EAAKgQ,QAAO,OAKlBpM,EAAAzK,UAAA0W,mBAAV,WACI5W,KAAK6W,wBACL7W,KAAKsL,cAAcvK,KAAK,IAAIoG,EAAe,mBAGrCwD,EAAAzK,UAAAqW,gCAAV,WACQvW,KAAKwW,4BACL1Q,OAAO+N,oBAAoB,UAAW7T,KAAKwW,2BAC3CxW,KAAKwW,0BAA4B,OAI/B7L,EAAAzK,UAAAqM,iBAAV,WACI,GAAKvM,KAAKoW,yBAAV,KAIM7B,EAAiBD,SAASE,eAAexU,KAAKwJ,wBAChD+K,GACAD,SAAS/S,KAAKkT,YAAYF,OAGxBI,EAASL,SAASM,cAAc,UACtCD,EAAOE,GAAK7U,KAAKwJ,uBAEjBxJ,KAAKsW,qCAECrI,EAAMjO,KAAKuJ,sBACjBoL,EAAOI,aAAa,MAAO9G,GAC3B0G,EAAOK,MAAMO,QAAU,OACvBjB,SAAS/S,KAAK0T,YAAYN,GAE1B3U,KAAKgX,2BAGCrM,EAAAzK,UAAA8W,uBAAV,WAAA,IAAAjQ,EAAA/G,KACIA,KAAK6W,wBACL7W,KAAK4K,OAAO6E,kBAAiB,WACzB1I,EAAKkQ,kBAAoBC,YACrBnQ,EAAKoQ,aAAaC,KAAKrQ,GACvBA,EAAKuC,0BAKPqB,EAAAzK,UAAA2W,sBAAV,WACQ7W,KAAKiX,oBACLI,cAAcrX,KAAKiX,mBACnBjX,KAAKiX,kBAAoB,OAIvBtM,EAAAzK,UAAAiX,aAAV,eACUxC,EAAcL,SAASE,eAAexU,KAAKwJ,wBAE5CmL,GACD3U,KAAKkL,OAAOqG,KACR,mCACAvR,KAAKwJ,4BAIP8N,EAAetX,KAAKqW,kBAErBiB,GACDtX,KAAK6W,4BAGH9C,EAAU/T,KAAKwH,SAAW,IAAM8P,EACtC3C,EAAO4C,cAAcC,YAAYzD,EAAS/T,KAAKkI,SAGnCyC,EAAAzK,UAAA4U,eAAhB,SACIzJ,EACAoM,EACAC,EACA3K,EACAvI,eAJA,IAAA6G,IAAAA,EAAA,SACA,IAAAoM,IAAAA,EAAA,SACA,IAAAC,IAAAA,EAAA,SACA,IAAA3K,IAAAA,GAAA,QACA,IAAAvI,IAAAA,EAAA,6HAYc,OAVRmT,EAAO3X,KAKTyH,EADAiQ,GAGc1X,KAAKyH,YAGT,CAAA,EAAMzH,KAAK4X,6BAQzB,GARMC,EAAQC,EAAAhW,OAGVuJ,EADAA,EACQwM,EAAQ7X,KAAKgL,OAAOnB,oBAAsBwB,EAE1CwM,GAGP7X,KAAKgI,qBAAuBhI,KAAK+H,KAClC,MAAM,IAAItC,MACN,iEAIJzF,KAAKgL,OAAOzC,aACZvI,KAAKuI,aAAevI,KAAKgL,OAAOzC,aAE5BvI,KAAK+H,MAAQ/H,KAAKgI,mBAClBhI,KAAKuI,aAAe,iBACbvI,KAAK+H,OAAS/H,KAAKgI,mBAC1BhI,KAAKuI,aAAe,WAEpBvI,KAAKuI,aAAe,QAItBwP,EAAiBJ,EAAKhQ,SAAS3B,QAAQ,MAAQ,EAAI,IAAM,IAE3D4B,EAAQ+P,EAAK/P,MAEb5H,KAAK+H,OAASH,EAAMpC,MAAM,wBAC1BoC,EAAQ,UAAYA,GAGpBqG,EACA0J,EAAKhQ,SACLoQ,EACA,iBACAxN,mBAAmBoN,EAAKpP,cACxB,cACAgC,mBAAmBoN,EAAKnQ,UACxB,UACA+C,mBAAmBc,GACnB,iBACAd,mBAAmB9C,GACnB,UACA8C,mBAAmB3C,GAEG,SAAtB5H,KAAKuI,cAA4BvI,KAAK+J,YAAtC,CAAA,EAAA,GAC8B,CAAA,EAAM/J,KAAKgY,6CAAnCnF,EAAAoF,EAAAA,WAAAA,EAAAA,CAAwBH,EAAAhW,OAA+C,IAAtEoW,EAASrF,EAAA,GAAEsF,EAAQtF,EAAA,GAC1B7S,KAAKsQ,SAAS8B,QAAQ,gBAAiB+F,GACvClK,GAAO,mBAAqBiK,EAC5BjK,GAAO,+CAGPwJ,IACAxJ,GAAO,eAAiB1D,mBAAmBkN,IAG3CE,EAAK9P,WACLoG,GAAO,aAAe1D,mBAAmBoN,EAAK9P,WAG9C8P,EAAK5P,OACLkG,GAAO,UAAY1D,mBAAmBsN,IAGtC9K,IACAkB,GAAO,oBAGX,IAAkBmK,EAAAzF,EAAAnT,OAAO6Y,KAAK7T,IAAO8T,EAAAF,EAAArX,QAAAuX,EAAAnX,KAAAmX,EAAAF,EAAArX,OAA1B0F,EAAG6R,EAAAzX,MACVoN,GACI,IAAM1D,mBAAmB9D,GAAO,IAAM8D,mBAAmB/F,EAAOiC,wGAGxE,GAAIzG,KAAKkJ,sBACL,IAAkBqP,EAAA5F,EAAAnT,OAAOoT,oBAAoB5S,KAAKkJ,oBAAkBsP,EAAAD,EAAAxX,QAAAyX,EAAArX,KAAAqX,EAAAD,EAAAxX,OAAzD0F,EAAG+R,EAAA3X,MACVoN,GACI,IAAMxH,EAAM,IAAM8D,mBAAmBvK,KAAKkJ,kBAAkBzC,wGAIxE,MAAA,CAAA,EAAOwH,SAIXtD,EAAAzK,UAAAuY,yBAAA,SACIC,EACAlU,GAFJ,IAAAuC,EAAA/G,KAII,QAHA,IAAA0Y,IAAAA,EAAA,SACA,IAAAlU,IAAAA,EAAA,KAEIxE,KAAK0L,eAAT,CAMA,GAFA1L,KAAK0L,gBAAiB,GAEjB1L,KAAKoO,oBAAoBpO,KAAK2H,UAC/B,MAAM,IAAIlC,MACN,0FAIJkT,EAAoB,GACpBlB,EAAoB,KAEF,iBAAXjT,EACPiT,EAAYjT,EACa,iBAAXA,IACdmU,EAAYnU,GAGhBxE,KAAK8U,eAAe4D,EAAiBjB,EAAW,MAAM,EAAOkB,GACxDvX,KAAKpB,KAAKgL,OAAOhB,SACjBmD,SAAK,SAAC9J,GACHgC,QAAQhC,MAAM,4BAA6BA,GAC3C0D,EAAK2E,gBAAiB,MAa3Bf,EAAAzK,UAAA0N,iBAAP,SACI8K,EACAlU,GAFJ,IAAAuC,EAAA/G,UACI,IAAA0Y,IAAAA,EAAA,SACA,IAAAlU,IAAAA,EAAA,IAEsB,KAAlBxE,KAAK2H,SACL3H,KAAKyY,yBAAyBC,EAAiBlU,GAE/CxE,KAAK8L,OACAY,KAAKC,EAAAA,OAAM,SAAC3L,GAAK,MAAW,8BAAXA,EAAE4F,QACnBgG,UAAS,SAAChL,GAAK,OAAAmF,EAAK0R,yBAAyBC,EAAiBlU,MASpEmG,EAAAzK,UAAA0Y,kBAAP,WACE5Y,KAAK0L,gBAAiB,GAGdf,EAAAzK,UAAA2Y,4BAAV,SAAsC5Q,GAElC,GAAIA,EAAQiM,gBAAiB,KACnB4E,EAAc,CAChBC,SAHK/Y,KAGUkS,oBACf8G,QAJKhZ,KAISqU,aACdxP,YALK7E,KAKagS,iBAClB3G,MANKrL,KAMOqL,OAEhBpD,EAAQiM,gBAAgB4E,KAItBnO,EAAAzK,UAAA8S,yBAAV,SACInO,EACAuI,EACA6L,EACAC,GAOA,GALAlZ,KAAKsQ,SAAS8B,QAAQ,eAAgBvN,GAClCqU,GACAlZ,KAAKsQ,SAAS8B,QAAQ,iBAAkBC,KAAKC,UAAU4G,EAAcrV,MAAM,OAE/E7D,KAAKsQ,SAAS8B,QAAQ,yBAA0B,GAAKlC,KAAKD,OACtDgJ,EAAW,KACLE,EAAoC,IAAZF,EAExBG,GADM,IAAIlJ,MACMmJ,UAAYF,EAClCnZ,KAAKsQ,SAAS8B,QAAQ,aAAc,GAAKgH,GAGzChM,GACApN,KAAKsQ,SAAS8B,QAAQ,gBAAiBhF,IAQrCzC,EAAAzK,UAAAkT,0BAAV,SAAoCL,OAC1BuG,EAAmBjH,KAAKkH,MAAMvZ,KAAKsQ,SAAS+C,QAAQ,uBAAyB,GAE7EmG,EAA2B,CAAC,eAAgB,gBAAiB,aAAc,SAEjFha,OAAO6Y,KAAKtF,GAAe0G,QAAO,SAAEhT,GAC7B+S,EAAUE,SAASjT,KACtB6S,EAAiB7S,GAAOsM,EAActM,MAI1CzG,KAAKsQ,SAAS8B,QAAQ,oBAAqBC,KAAKC,UAAUgH,KAOvD3O,EAAAzK,UAAAuN,SAAP,SAAgBxF,GACZ,YADY,IAAAA,IAAAA,EAAA,MACqB,SAA7BjI,KAAKgL,OAAOzC,aACLvI,KAAK2Z,mBAAmBvY,KAAI,SAACQ,GAAK,OAAA,IAGlC5B,KAAK4Z,qBAAqB3R,IAKjC0C,EAAAzK,UAAAgG,iBAAR,SAAyBC,GACrB,OAAKA,GAAsC,IAAvBA,EAAYvD,QAIF,MAA1BuD,EAAY0T,OAAO,KACnB1T,EAAcA,EAAYlB,OAAO,IAG9BjF,KAAKiL,UAAU/E,iBAAiBC,IAP5B,IAYRwE,EAAAzK,UAAAyZ,iBAAP,WAAA,IAAA5S,EAAA/G,KAEU8Z,EAAQ9Z,KAAKkG,iBAAiBJ,OAAOC,SAASgU,QAE9CC,EAAOF,EAAY,KACnBzO,EAAQyO,EAAa,MAErB5P,EAAOnE,SAASmE,KACLxG,QAAQ,oBAAqB,IAC7BA,QAAQ,qBAAsB,IAC9BA,QAAQ,qBAAsB,IAC9BA,QAAQ,6BAA8B,IAEvDuW,QAAQC,aAAa,KAAMpU,OAAOqU,KAAMjQ,GAEpC,IAAAnF,EAAA7B,EAAAlD,KAAAoa,WAAA/O,GAAA,GAACgP,EAAAtV,EAAA,GAAcuV,EAAAvV,EAAA,GAGnB,GAFA/E,KAAKqL,MAAQiP,EAETR,EAAa,MAAG,CAChB9Z,KAAK2L,MAAM,yBACX3L,KAAKua,iBAAiB,GAAIT,OACpBxI,EAAM,IAAIlK,EAAgB,aAAc,GAAI0S,GAElD,OADA9Z,KAAKsL,cAAcvK,KAAKuQ,GACjB7Q,QAAQE,OAAO2Q,GAG1B,IAAK+I,EACD,OAAO5Z,QAAQC,UAInB,IADgBV,KAAKwa,cAAcH,GACrB,KACJI,EAAQ,IAAIrT,EAAgB,yBAA0B,MAE5D,OADApH,KAAKsL,cAAcvK,KAAK0Z,GACjBha,QAAQE,OAAO8Z,GAG1B,OAAIT,EACO,IAAIvZ,QAAO,SAAEC,EAASC,GACzBoG,EAAK2T,iBAAiBV,GAAM5Y,KAAI,SAACF,GAC7BR,MACDyM,SAAK,SAACmE,GACL3Q,EAAO2Q,OAIR7Q,QAAQC,WAOfiK,EAAAzK,UAAAwa,iBAAR,SAAyBV,OACjBxV,GAAS,IAAI+N,EAAAA,YACZR,IAAI,aAAc,sBAClBA,IAAI,OAAQiI,GACZjI,IAAI,eAAgB/R,KAAKyH,aAE9B,IAAKzH,KAAK+J,YAAa,KACb4Q,EAAe3a,KAAKsQ,SAAS+C,QAAQ,iBAEtCsH,EAGDnW,EAASA,EAAOuN,IAAI,gBAAiB4I,GAFrCtV,QAAQkM,KAAK,4CAMrB,OAAOvR,KAAK4a,qBAAqBpW,IAG7BmG,EAAAzK,UAAA0a,qBAAR,SAA6BpW,GAA7B,IAAAuC,EAAA/G,KAEQ2R,GAAU,IAAIC,EAAAA,aACOG,IAAI,eAAgB,qCAE7C,IAAK/R,KAAKoO,oBAAoBpO,KAAKqI,eAC/B,MAAM,IAAI5C,MAAM,kEAGpB,GAAIzF,KAAK8J,iBAAkB,KACjB2I,EAASpO,KAAQrE,KAAKwH,SAAQ,IAAIxH,KAAK8I,mBAC7C6I,EAAUA,EAAQI,IACd,gBACA,SAAWU,GAWnB,OARKzS,KAAK8J,mBACNtF,EAASA,EAAOuN,IAAI,YAAa/R,KAAKwH,YAGrCxH,KAAK8J,kBAAoB9J,KAAK8I,oBAC/BtE,EAASA,EAAOuN,IAAI,gBAAiB/R,KAAK8I,oBAGvC,IAAIrI,QAAO,SAAEC,EAASC,WAEzB,GAAIoG,EAAKmC,sBACL,IAAgB,IAAAwJ,EAAAC,EAAAnT,OAAOoT,oBAAoB7L,EAAKmC,oBAAkB2J,EAAAH,EAAA3R,QAAA8R,EAAA1R,KAAA0R,EAAAH,EAAA3R,OAAE,CAA/D,IAAI0F,EAAGoM,EAAAhS,MACR2D,EAASA,EAAOuN,IAAItL,EAAKM,EAAKmC,kBAAkBzC,yGAIxDM,EAAK8D,KAAKiI,KAAoB/L,EAAKsB,cAAe7D,EAAQ,CAAEmN,QAAOA,IAAI/E,UAAS,SAC3EmG,GACGhM,EAAK4E,MAAM,wBAAyBoH,GACpChM,EAAKiM,yBACDD,EAAcE,aACdF,EAAcG,cACdH,EAAcI,WACdJ,EAAcnL,OAElBb,EAAKqM,0BAA0BL,GAE3BhM,EAAKgB,MAAQgL,EAAcQ,SAC3BxM,EAAK0M,eAAeV,EAAcQ,SAAUR,EAAcE,cAC1D7R,KAAI,SAACF,GACD6F,EAAK2M,aAAaxS,GAElB6F,EAAKuE,cAAcvK,KAAK,IAAI8F,EAAkB,mBAC9CE,EAAKuE,cAAcvK,KAAK,IAAI8F,EAAkB,oBAE9CnG,EAAQqS,KAEX5F,SAAK,SAAC9F,GACHN,EAAKuE,cAAcvK,KAAK,IAAIqG,EAAgB,yBAA0BC,IACtEhC,QAAQhC,MAAM,2BACdgC,QAAQhC,MAAMgE,GAEd1G,EAAO0G,MAGXN,EAAKuE,cAAcvK,KAAK,IAAI8F,EAAkB,mBAC9CE,EAAKuE,cAAcvK,KAAK,IAAI8F,EAAkB,oBAE9CnG,EAAQqS,KAEf,SACAzB,GACGjM,QAAQhC,MAAM,sBAAuBiO,GACrCvK,EAAKuE,cAAcvK,KAAK,IAAIqG,EAAgB,sBAAuBkK,IACnE3Q,EAAO2Q,QAchB3G,EAAAzK,UAAA0Z,qBAAP,SAA4B3R,GAA5B,IAGQ6R,EAHR/S,EAAA/G,UAA4B,IAAAiI,IAAAA,EAAA,MAMpB6R,GALJ7R,EAAUA,GAAW,IAITrC,mBACA5F,KAAKiL,UAAUtF,sBAAsBsC,EAAQrC,oBAE7C5F,KAAKiL,UAAUtF,wBAG3B3F,KAAK2L,MAAM,aAAcmO,OAEnBzO,EAAQyO,EAAa,MAEvB/U,EAAA7B,EAAAlD,KAAAoa,WAAA/O,GAAA,GAACgP,EAAAtV,EAAA,GAAcuV,EAAAvV,EAAA,GAGnB,GAFA/E,KAAKqL,MAAQiP,EAETR,EAAa,MAAG,CAChB9Z,KAAK2L,MAAM,yBACX3L,KAAKua,iBAAiBtS,EAAS6R,OACzBxI,EAAM,IAAIlK,EAAgB,cAAe,GAAI0S,GAEnD,OADA9Z,KAAKsL,cAAcvK,KAAKuQ,GACjB7Q,QAAQE,OAAO2Q,OAGpBzM,EAAciV,EAAoB,aAClCd,EAAUc,EAAgB,SAC1BxC,EAAewC,EAAqB,cACpCZ,EAAgBY,EAAa,MAEnC,IAAK9Z,KAAKgI,qBAAuBhI,KAAK+H,KAClC,OAAOtH,QAAQE,OACX,6DAIR,GAAIX,KAAKgI,qBAAuBnD,EAC5B,OAAOpE,QAAQC,SAAQ,GAE3B,GAAIV,KAAKgI,qBAAuBC,EAAQ4S,0BAA4BxP,EAChE,OAAO5K,QAAQC,SAAQ,GAE3B,GAAIV,KAAK+H,OAASiR,EACd,OAAOvY,QAAQC,SAAQ,GAW3B,IARIV,KAAKqJ,uBAAyBiO,GAC9BtX,KAAKkL,OAAOqG,KACR,mJAMJvR,KAAKgI,qBAAuBC,EAAQ4S,2BACpB7a,KAAKwa,cAAcH,GAErB,KACJS,EAAQ,IAAI1T,EAAgB,yBAA0B,MAE5D,OADApH,KAAKsL,cAAcvK,KAAK+Z,GACjBra,QAAQE,OAAOma,GAa9B,OATI9a,KAAKgI,oBACLhI,KAAKgT,yBACDnO,EACA,KACAiV,EAAkB,YAAK9Z,KAAK+a,uCAC5B7B,GAIHlZ,KAAK+H,KAWH/H,KAAKyT,eAAeuF,EAASnU,GAC/BzD,KAAI,SAACF,GACF,OAAI+G,EAAQ+S,kBACD/S,EACF+S,kBAAkB,CACfnW,YAAaA,EACbkU,SAAU7X,EAAOkE,cACjB4T,QAAS9X,EAAO8X,QAChB3N,MAAOA,IAEVjK,KAAI,SAACQ,GAAK,OAAAV,IAEZA,IAEVE,KAAI,SAACF,GASF,OARA6F,EAAK2M,aAAaxS,GAClB6F,EAAKkU,kBAAkB3D,GACnBvQ,EAAKqB,sBACLrC,SAASF,KAAO,IAEpBkB,EAAKuE,cAAcvK,KAAK,IAAI8F,EAAkB,mBAC9CE,EAAK8R,4BAA4B5Q,GACjClB,EAAK2E,gBAAiB,GACf,IAEVyB,SAAK,SAAC9F,GAMH,OALAN,EAAKuE,cAAcvK,KACf,IAAIqG,EAAgB,yBAA0BC,IAElDN,EAAKmE,OAAO7H,MAAM,2BAClB0D,EAAKmE,OAAO7H,MAAMgE,GACX5G,QAAQE,OAAO0G,MAzC1BrH,KAAKsL,cAAcvK,KAAK,IAAI8F,EAAkB,mBAC1C7G,KAAKoI,sBAAwBH,EAAQ3E,6BACrCyC,SAASF,KAAO,IAGpB7F,KAAK6Y,4BAA4B5Q,GAC1BxH,QAAQC,SAAQ,KAuCvBiK,EAAAzK,UAAAka,WAAR,SAAmB/O,OACXwM,EAAQxM,EACRiP,EAAY,GAEhB,GAAIjP,EAAO,KACD6P,EAAM7P,EAAMrF,QAAQhG,KAAKgL,OAAOnB,qBAClCqR,GAAO,IACPrD,EAAQxM,EAAMpG,OAAO,EAAGiW,GACxBZ,EAAYjP,EAAMpG,OAAOiW,EAAMlb,KAAKgL,OAAOnB,oBAAoBjH,SAGvE,MAAO,CAACiV,EAAOyC,IAGT3P,EAAAzK,UAAAsa,cAAV,SACIH,OAEMc,EAAanb,KAAKsQ,SAAS+C,QAAQ,SACzC,GAAI8H,IAAed,EAAc,CAI7B,OADAhV,QAAQhC,MADI,qDACO8X,EAAYd,IACxB,EAEX,OAAO,GAGD1P,EAAAzK,UAAAwT,aAAV,SAAuBsF,GACnBhZ,KAAKsQ,SAAS8B,QAAQ,WAAY4G,EAAQA,SAC1ChZ,KAAKsQ,SAAS8B,QAAQ,sBAAuB4G,EAAQoC,mBACrDpb,KAAKsQ,SAAS8B,QAAQ,sBAAuB,GAAK4G,EAAQqC,kBAC1Drb,KAAKsQ,SAAS8B,QAAQ,qBAAsB,GAAKlC,KAAKD,QAGhDtF,EAAAzK,UAAA+a,kBAAV,SAA4B3D,GACxBtX,KAAKsQ,SAAS8B,QAAQ,gBAAiBkF,IAGjC3M,EAAAzK,UAAAmW,gBAAV,WACI,OAAOrW,KAAKsQ,SAAS+C,QAAQ,kBAGvB1I,EAAAzK,UAAAqa,iBAAV,SAA2BtS,EAAuB6R,GAC1C7R,EAAQgM,cACRhM,EAAQgM,aAAa6F,GAErB9Z,KAAKoI,sBACLrC,SAASF,KAAO,KAOjB8E,EAAAzK,UAAAuT,eAAP,SACIuF,EACAnU,EACAyW,GAHJ,IAAAvU,EAAA/G,UAGI,IAAAsb,IAAAA,GAAA,OAEMC,EAAavC,EAAQnV,MAAM,KAE3B2X,EAAajY,EADEvD,KAAKyb,UAAUF,EAAW,KAEzC9I,EAASJ,KAAKkH,MAAMiC,GAEpBE,EAAanY,EADEvD,KAAKyb,UAAUF,EAAW,KAEzCnH,EAAS/B,KAAKkH,MAAMmC,GACpBP,EAAanb,KAAKsQ,SAAS+C,QAAQ,SAEzC,GAAI1T,MAAMgc,QAAQvH,EAAOwH,MACrB,GAAIxH,EAAOwH,IAAIC,MAAK,SAACtZ,GAAK,OAAAA,IAAMwE,EAAKS,WAAW,KACtC8J,EAAM,mBAAqB8C,EAAOwH,IAAIzX,KAAK,KAEjD,OADAnE,KAAKkL,OAAOqG,KAAKD,GACV7Q,QAAQE,OAAO2Q,SAG1B,GAAI8C,EAAOwH,MAAQ5b,KAAKwH,SAAU,CACxB8J,EAAM,mBAAqB8C,EAAOwH,IAExC,OADA5b,KAAKkL,OAAOqG,KAAKD,GACV7Q,QAAQE,OAAO2Q,GAI9B,IAAK8C,EAAOjC,IAAK,CACPb,EAAM,2BAEZ,OADAtR,KAAKkL,OAAOqG,KAAKD,GACV7Q,QAAQE,OAAO2Q,GAQ1B,GACItR,KAAKqJ,sBACLrJ,KAAK0U,sBACL1U,KAAK0U,uBAAyBN,EAAY,IAC5C,CACQ9C,EACF,8EACiBtR,KAAK0U,qBAAoB,mBAC1CN,EAAY,IAIhB,OADApU,KAAKkL,OAAOqG,KAAKD,GACV7Q,QAAQE,OAAO2Q,GAG1B,IAAK8C,EAAO0H,IAAK,CACPxK,EAAM,2BAEZ,OADAtR,KAAKkL,OAAOqG,KAAKD,GACV7Q,QAAQE,OAAO2Q,GAG1B,IAAKtR,KAAK4J,iBAAmBwK,EAAO2H,MAAQ/b,KAAKkI,OAAQ,CAC/CoJ,EAAM,iBAAmB8C,EAAO2H,IAEtC,OADA/b,KAAKkL,OAAOqG,KAAKD,GACV7Q,QAAQE,OAAO2Q,GAG1B,IAAKgK,GAAkBlH,EAAOyD,QAAUsD,EAAY,CAC1C7J,EAAM,gBAAkB8C,EAAOyD,MAErC,OADA7X,KAAKkL,OAAOqG,KAAKD,GACV7Q,QAAQE,OAAO2Q,GAG1B,IACKtR,KAAKyJ,oBACNzJ,KAAKgI,qBACJoM,EAAgB,QACnB,CACQ9C,EAAM,wBAEZ,OADAtR,KAAKkL,OAAOqG,KAAKD,GACV7Q,QAAQE,OAAO2Q,OAGpBrB,EAAMC,KAAKD,MACX+L,EAA4B,IAAb5H,EAAO0H,IACtBG,EAA6B,IAAb7H,EAAO8H,IACvBC,EAAiD,KAA9Bnc,KAAKoc,gBAAkB,KAEhD,GACIJ,EAAeG,GAAmBlM,GAClCgM,EAAgBE,GAAmBlM,EACrC,CACQqB,EAAM,oBAOZ,OANAjM,QAAQhC,MAAMiO,GACdjM,QAAQhC,MAAM,CACV4M,IAAKA,EACL+L,aAAcA,EACdC,cAAeA,IAEZxb,QAAQE,OAAO2Q,OAGpB+K,EAAqC,CACvCxX,YAAaA,EACbmU,QAASA,EACT/P,KAAMjJ,KAAKiJ,KACX7D,cAAegP,EACfzP,cAAe8N,EACf6J,SAAQ,WAAQ,OAAAvV,EAAKoK,aAIzB,OAAOnR,KAAKuc,YAAYF,GACrBjb,KAAI,SAACob,GACJ,IACGzV,EAAK0C,oBACN1C,EAAKiB,qBACJwU,EACH,KACQlL,EAAM,gBAEZ,OADAvK,EAAKmE,OAAOqG,KAAKD,GACV7Q,QAAQE,OAAO2Q,GAG1B,OAAOvK,EAAK0V,eAAeJ,GAAkBjb,KAAI,SAACQ,GAS9C,MAR8B,CAC1BoX,QAASA,EACT5T,cAAegP,EACfgH,kBAAmBM,EACnB/W,cAAe8N,EACfiK,kBAAmBlB,EACnBH,iBAAkBY,QAWzBtR,EAAAzK,UAAAgS,kBAAP,eACUkC,EAASpU,KAAKsQ,SAAS+C,QAAQ,uBACrC,OAAKe,EAGE/B,KAAKkH,MAAMnF,GAFP,MAQRzJ,EAAAzK,UAAAyc,iBAAP,eACUC,EAAS5c,KAAKsQ,SAAS+C,QAAQ,kBACrC,OAAKuJ,EAGEvK,KAAKkH,MAAMqD,GAFP,MAQRjS,EAAAzK,UAAAmU,WAAP,WACI,OAAOrU,KAAKsQ,SACNtQ,KAAKsQ,SAAS+C,QAAQ,YACtB,MAGA1I,EAAAzK,UAAAub,UAAV,SAAoBoB,GAChB,KAAOA,EAAWja,OAAS,GAAM,GAC7Bia,GAAc,IAElB,OAAOA,GAMJlS,EAAAzK,UAAA8R,eAAP,WACI,OAAOhS,KAAKsQ,SACNtQ,KAAKsQ,SAAS+C,QAAQ,gBACtB,MAGH1I,EAAAzK,UAAA4c,gBAAP,WACI,OAAO9c,KAAKsQ,SACNtQ,KAAKsQ,SAAS+C,QAAQ,iBACtB,MAOH1I,EAAAzK,UAAA+O,yBAAP,WACI,OAAKjP,KAAKsQ,SAAS+C,QAAQ,cAGpB0J,SAAS/c,KAAKsQ,SAAS+C,QAAQ,cAAe,IAF1C,MAKL1I,EAAAzK,UAAAoP,uBAAV,WACI,OAAOyN,SAAS/c,KAAKsQ,SAAS+C,QAAQ,0BAA2B,KAG3D1I,EAAAzK,UAAA4P,mBAAV,WACI,OAAOiN,SAAS/c,KAAKsQ,SAAS+C,QAAQ,sBAAuB,KAO1D1I,EAAAzK,UAAA2O,qBAAP,WACI,OAAK7O,KAAKsQ,SAAS+C,QAAQ,uBAIpB0J,SAAS/c,KAAKsQ,SAAS+C,QAAQ,uBAAwB,IAHnD,MAUR1I,EAAAzK,UAAA8c,wBAAP,WACI,OAAKhd,KAAKsQ,SAAS+C,QAAQ,qBAGpBhB,KAAKkH,MAAMvZ,KAAKsQ,SAAS+C,QAAQ,sBAF/B,MAQN1I,EAAAzK,UAAAyN,oBAAP,WACI,GAAI3N,KAAKgS,iBAAkB,KACjBoH,EAAYpZ,KAAKsQ,SAAS+C,QAAQ,cAClCpD,EAAM,IAAIC,KAChB,QAAIkJ,GAAa2D,SAAS3D,EAAW,IAAMnJ,EAAIoJ,WAOnD,OAAO,GAMJ1O,EAAAzK,UAAAoM,gBAAP,WACI,GAAItM,KAAKqU,aAAc,KACb+E,EAAYpZ,KAAKsQ,SAAS+C,QAAQ,uBAClCpD,EAAM,IAAIC,KAChB,QAAIkJ,GAAa2D,SAAS3D,EAAW,IAAMnJ,EAAIoJ,WAOnD,OAAO,GAOJ1O,EAAAzK,UAAA+c,oBAAP,WACI,MAAO,UAAYjd,KAAKgS,kBASrBrH,EAAAzK,UAAA6W,OAAP,SAAcmG,QAAA,IAAAA,IAAAA,GAAA,OACJ3J,EAAWvT,KAAKqU,aAiBtB,GAhBArU,KAAKsQ,SAAS6M,WAAW,gBACzBnd,KAAKsQ,SAAS6M,WAAW,YACzBnd,KAAKsQ,SAAS6M,WAAW,iBACzBnd,KAAKsQ,SAAS6M,WAAW,SACzBnd,KAAKsQ,SAAS6M,WAAW,cACzBnd,KAAKsQ,SAAS6M,WAAW,uBACzBnd,KAAKsQ,SAAS6M,WAAW,uBACzBnd,KAAKsQ,SAAS6M,WAAW,sBACzBnd,KAAKsQ,SAAS6M,WAAW,0BACzBnd,KAAKsQ,SAAS6M,WAAW,kBACzBnd,KAAKsQ,SAAS6M,WAAW,iBAEzBnd,KAAK0U,qBAAuB,KAE5B1U,KAAKsL,cAAcvK,KAAK,IAAIoG,EAAe,WAEtCnH,KAAKmI,YAGN+U,IAIC3J,GAAavT,KAAK0H,uBAAvB,KAIIS,EAEJ,IAAKnI,KAAKoO,oBAAoBpO,KAAKmI,WAC/B,MAAM,IAAI1C,MACN,uFAKR,GAAIzF,KAAKmI,UAAUnC,QAAQ,OAAS,EAChCmC,EAAYnI,KAAKmI,UACZzE,QAAQ,mBAAoB6P,GAC5B7P,QAAQ,oBAAqB1D,KAAKwH,cACpC,KAEChD,EAAS,IAAI+N,EAAAA,WAEbgB,IACA/O,EAASA,EAAOuN,IAAI,gBAAiBwB,QAGnC6J,EAAgBpd,KAAK0H,uBAAyB1H,KAAKyH,YACrD2V,IACA5Y,EAASA,EAAOuN,IAAI,2BAA4BqL,IAGpDjV,EACInI,KAAKmI,WACJnI,KAAKmI,UAAUnC,QAAQ,MAAQ,EAAI,IAAM,KAC1CxB,EAAOP,WAEfjE,KAAKgL,OAAOhB,QAAQ7B,KAMjBwC,EAAAzK,UAAA0X,mBAAP,eACUD,EAAO3X,KACb,OAAOA,KAAKqd,cAAcjc,KAAI,SAAWyW,GAErC,OADAF,EAAKrH,SAAS8B,QAAQ,QAASyF,GACxBA,KAORlN,EAAAzK,UAAAod,YAAP,WACItd,KAAK0O,wBACL1O,KAAK2O,qBAGChE,EAAAzK,UAAAmd,YAAV,WAAA,IAAAtW,EAAA/G,KACI,OAAO,IAAIS,QAAO,SAAEC,GAChB,GAAIqG,EAAKe,OACL,MAAM,IAAIrC,MACN,oEAQFwI,EAAM,mEACRsP,EAAO,GACP1I,EAAK,GAEH1J,EAASqS,KAAKrS,QAAUqS,KAAe,SAC7C,GAAIrS,EAEA,QADMsS,EAAQtS,EAAOuS,gBAAgB,IAAIC,WAAWJ,IAC7C,EAAIA,KACP1I,GAAM5G,EAAkB,GAAdwP,EAAMF,SAGpB,KAAO,EAAIA,KACP1I,GAAM5G,EAAoB,GAAhBmC,KAAKwN,SAAgB,GAIvCld,EAAQmU,MAIAlK,EAAAzK,UAAAqc,YAAhB,SAA4B/X,oEACxB,OAAKxE,KAAK+K,uBAMV,CAAA,EAAO/K,KAAK+K,uBAAuBxG,eAAeC,KAL9CxE,KAAKkL,OAAOqG,KACR,+DAEJ,CAAA,GAAO,SAKL5G,EAAAzK,UAAAuc,eAAV,SAAyBjY,GACrB,OAAKxE,KAAK+K,uBAMH/K,KAAK+K,uBAAuB8S,kBAAkBrZ,IALjDxE,KAAKkL,OAAOqG,KACR,iEAEG9Q,QAAQC,QAAQ,QAUxBiK,EAAAzK,UAAA4d,cAAP,SACIpF,EACAlU,GAEA,YAHA,IAAAkU,IAAAA,EAAA,SACA,IAAAlU,IAAAA,EAAA,IAE0B,SAAtBxE,KAAKuI,aACEvI,KAAK+d,aAAarF,EAAiBlU,GAEnCxE,KAAK4N,iBAAiB8K,EAAiBlU,IAQ/CmG,EAAAzK,UAAA6d,aAAP,SACIrF,EACAlU,GAFJ,IAAAuC,EAAA/G,UACI,IAAA0Y,IAAAA,EAAA,SACA,IAAAlU,IAAAA,EAAA,IAEsB,KAAlBxE,KAAK2H,SACL3H,KAAKge,qBAAqBtF,EAAiBlU,GAE3CxE,KAAK8L,OAAOY,KAAKC,EAAAA,OAAM,SAAC3L,GAAK,MAAW,8BAAXA,EAAE4F,QAC9BgG,UAAS,SAAChL,GAAK,OAAAmF,EAAKiX,qBAAqBtF,EAAiBlU,MAI3DmG,EAAAzK,UAAA8d,qBAAR,SACItF,EACAlU,GAGA,QAJA,IAAAkU,IAAAA,EAAA,SACA,IAAAlU,IAAAA,EAAA,KAGKxE,KAAKoO,oBAAoBpO,KAAK2H,UAC/B,MAAM,IAAIlC,MAAM,6DAGpBzF,KAAK8U,eAAe4D,EAAiB,GAAI,MAAM,EAAOlU,GAAQpD,KAAI,SAAW6M,GACzElI,SAASmE,KAAO+D,IAEnBd,SAAK,SAAC9J,GACHgC,QAAQhC,MAAM,sCACdgC,QAAQhC,MAAMA,MAINsH,EAAAzK,UAAA8X,mCAAhB,2GAEI,IAAKhY,KAAKmL,OACN,MAAM,IAAI1F,MAAM,qGAIH,MAAA,CAAA,EAAMzF,KAAKqd,sBACP,OADflF,EAAWpT,EAAAjD,OACI,CAAA,EAAM9B,KAAKmL,OAAOvG,SAASuT,EAAU,mBAG1D,OAHM8F,EAAelZ,EAAAjD,OAGrB,CAAA,EAAO,CAFWsC,EAAgB6Z,GAEf9F,8BA9oE1BxR,EAAAA,sDAnCoBuX,EAAAA,cACZC,EAAAA,kBAiBLC,EAAYC,WAAA,CAAA,CAAAzX,KAoEP0X,EAAAA,kBAhFLC,EAAiBF,WAAA,CAAA,CAAAzX,KAiFZ0X,EAAAA,kBA7DAhX,EAAU+W,WAAA,CAAA,CAAAzX,KA8DV0X,EAAAA,kBA/EA5Y,SAQL8Y,SAWKC,EAAaJ,WAAA,CAAA,CAAAzX,KA+Db0X,EAAAA,cAwlET3T,EAhpEA,CACkCrD,gBClClC,OAFA,6BAaA,OATA,6BCCA,OAFA,6BAIA,SAAAoX,KAKA,OAHEA,EAAAxe,UAAAye,YAAA,SAAYrN,GACV,OAAOsN,EAAAA,WAAWtN,IAEtBoN,KCKAG,EAAA,WAGI,SAAAA,EACYC,EACAC,EACAC,EACYC,GAHZjf,KAAA8e,YAAAA,EACA9e,KAAA+e,aAAAA,EACA/e,KAAAgf,aAAAA,EACYhf,KAAAif,aAAAA,EAgE5B,OA7DYJ,EAAA3e,UAAAgf,SAAR,SAAiBjR,GACb,OAAIjO,KAAKif,aAAaE,eAAeC,oBAC1Bpf,KAAKif,aAAaE,eAAeC,oBAAoBnR,IAG5DjO,KAAKif,aAAaE,eAAeE,eACxBrf,KAAKif,aAAaE,eAAeE,YAAYC,KAAI,SAACC,GAAK,OAAAtR,EAAIQ,WAAW8Q,MAMlFV,EAAA3e,UAAAsf,UAAP,SACEC,EACA1e,GAFF,IAAAgG,EAAA/G,KAIQiO,EAAMwR,EAAIxR,IAAIO,cAGpB,OAAKxO,KAAKif,cAGLjf,KAAKif,aAAaE,eAGnBnf,KAAKif,aAAaE,eAAeE,cAAgBrf,KAAKkf,SAASjR,GAC1DlN,EAAK2e,OAAOD,GAGGzf,KAAKif,aAAaE,eAAeQ,gBAQlDC,EAAAA,MACLjQ,EAAAA,GAAG3P,KAAK+e,aAAa/M,kBAAkBtF,KACrCC,EAAAA,OAAM,SAACkT,GAAS,QAAAA,KAElB7f,KAAK+e,aAAajT,OAAOY,KACvBC,EAAAA,OAAM,SAAC3L,GAAK,MAAW,mBAAXA,EAAE4F,OACd2I,EAAAA,QAvDwB,KAwDxBzL,EAAAA,IAAG,SAAClC,GAAK,OAAAmF,EAAKgY,aAAa/M,qBAE7BtF,KACAoT,EAAAA,KAAK,GACLC,EAAAA,SAAQ,SAACF,GACP,GAAIA,EAAO,KACHpN,EAAS,UAAYoN,EACrBlO,EAAU8N,EAAI9N,QAAQI,IAAI,gBAAiBU,GACjDgN,EAAMA,EAAIO,MAAM,CAAErO,QAAOA,IAG3B,OAAO5Q,EACJ2e,OAAOD,GACP/S,KAAKuT,EAAAA,WAAU,SAAC3O,GAAO,OAAAvK,EAAKiY,aAAaL,YAAYrN,SAzBnDvQ,EACJ2e,OAAOD,GACP/S,KAAKuT,EAAAA,WAAU,SAAC3O,GAAO,OAAAvK,EAAKiY,aAAaL,YAAYrN,MAdjDvQ,EAAK2e,OAAOD,wBA9BxB9Y,EAAAA,sDALQyX,SACAzT,SAHAuV,SACAC,EAAiB9B,WAAA,CAAA,CAAAzX,KAajB0X,EAAAA,cAgETO,EAvEA,gBCXA,SAAAuB,KAOA,OANEA,EAAAlgB,UAAA2d,kBAAA,SAAkBxB,GAChB,OAAO5b,QAAQC,QAAQ,OAEzB0f,EAAAlgB,UAAAqE,eAAA,SAAe8X,GACb,OAAO5b,QAAQC,SAAQ,IAE3B0f,KCbA,SAAgBC,IACZ,OAAOhb,QAGX,SAAgBib,IACZ,MAAiC,oBAAnBrU,eAAiCA,eAAiB,KCWpE,kBAAA,SAAAsU,IAAA,IAAAxZ,EAAA,OAAAC,GAAAA,EAAA3F,MAAArB,KAAA+N,YAAA/N,YAIE+G,EAAAyZ,kBAA8B,CAC5B,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAOFzZ,EAAA0Z,iBAAmB,MAsHrB,OA5I2CxZ,EAAAA,EAAAA,GAwBzCsZ,EAAArgB,UAAA2d,kBAAA,SAAkBrZ,EAA0Bkc,GAA5C,IAAA3Z,EAAA/G,KACE,QAD0C,IAAA0gB,IAAAA,GAAA,IACrClc,EAAOwU,QAAS,MAAM,IAAIvT,MAAM,+BACrC,IAAKjB,EAAOG,cACV,MAAM,IAAIc,MAAM,sCAClB,IAAKjB,EAAOyE,KAAM,MAAM,IAAIxD,MAAM,4BAElC,IACGjB,EAAOyE,KAAW,OAClBtJ,MAAMgc,QAAQnX,EAAOyE,KAAW,OACF,IAA/BzE,EAAOyE,KAAW,KAAErG,OAEpB,MAAM,IAAI6C,MAAM,mCAOdgB,EAFAka,EAAcnc,EAAOG,cAAmB,IACxC0T,EAAiB7T,EAAOyE,KAAW,KAGnC1D,EAAMf,EAAOG,cAAmB,IAEpC,GAAIgc,EACFla,EAAM4R,EAAKiH,KAAI,SAAChV,GAAK,OAAAA,EAAO,MAAMqW,QAC7B,KACDC,EAAM5gB,KAAK6gB,QAAQtb,GACnBub,EAAezI,EAAK1L,OAAM,SAC5BrC,GAAK,OAAAA,EAAO,MAAMsW,GAAoB,QAAbtW,EAAO,MASlC,GAAIwW,EAAale,OAAS,EAAG,KACvBS,EACF,iFAEF,OADAgC,QAAQhC,MAAMA,GACP5C,QAAQE,OAAO0C,GACW,IAAxByd,EAAale,SACtB6D,EAAMqa,EAAa,IAIvB,IAAKra,IAAQia,GAASlc,EAAO8X,SAC3B,OAAO9X,EACJ8X,WACAlb,KAAI,SAAC2f,GAAc,OAACvc,EAAOyE,KAAO8X,IAClC3f,KAAI,SAACQ,GAAK,OAAAmF,EAAK8W,kBAAkBrZ,GAAQ,KAG9C,IAAKiC,GAAOia,IAAUC,EAAK,CACrBtd,EAAQ,yBAEZ,OADAgC,QAAQhC,MAAMA,GACP5C,QAAQE,OAAO0C,GAGxB,IAAKoD,GAAOia,GAASC,EAAK,CACpBtd,EACF,oIAIAsd,EAGF,OADAtb,QAAQhC,MAAMA,GACP5C,QAAQE,OAAO0C,OAGpB2d,EAASC,EAAAA,QAAWC,OAAOza,GAC3B0a,EAAoB,CACtB5b,IAAKvF,KAAKwgB,kBACVY,YAAaphB,KAAKygB,kBAQpB,OANcY,EAAAA,KAAQC,IAAIC,IAAIC,UAC5Bhd,EAAOwU,QACPgI,EACAG,GAIO1gB,QAAQC,UAERD,QAAQE,OAAO,wBAIlB4f,EAAArgB,UAAA2gB,QAAR,SAAgBtb,GACd,OAAQA,EAAIsU,OAAO,IACjB,IAAK,IACH,MAAO,MACT,IAAK,IACH,MAAO,KACT,QACE,MAAM,IAAIpU,MAAM,8BAAgCF,KAItDgb,EAAArgB,UAAA0E,SAAA,SAAS6c,EAAqBC,OAExBxgB,EADU,IAAImgB,EAAAA,KAAQlW,OAAOwW,cAAc,CAAEpc,IAAKmc,IACjCE,aAAaH,GAC9BI,EAAoB7hB,KAAK8hB,oBAAoB5gB,GACjD,OAAOT,QAAQC,QAAQmhB,IAGzBtB,EAAArgB,UAAA4hB,oBAAA,SAAoBC,GAElB,QADI7gB,EAAS,GACJ+B,EAAI,EAAGA,EAAI8e,EAAUnf,OAAQK,GAAK,EAAG,KACxC+e,EAAWD,EAAUlI,OAAO5W,GAAK8e,EAAUlI,OAAO5W,EAAI,GACtDgf,EAAMlF,SAASiF,EAAU,IAC7B9gB,GAAUghB,OAAOC,aAAaF,GAEhC,OAAO/gB,GAEXqf,GA5I2Cjc,GChB3C8d,EAAA,WAoBA,SAAAA,KAgCA,OA1BSA,EAAAC,QAAP,SACErX,EACAsX,GAEA,YAHA,IAAAtX,IAAAA,EAAA,WACA,IAAAsX,IAAAA,EAAAlC,GAEO,CACLmC,SAAUH,EACVI,UAAW,CACT7X,EACAjF,EACA,CAAE+c,QAASjE,EAAakE,WAAYrC,GACpC,CAAEoC,QAASrE,EAAcsE,WAAYpC,GACrC,CAAEmC,QAASlE,EAAmBoE,SAAUL,GACxC,CAAEG,QAAShE,EAAekE,SAAUpC,GACpC,CACEkC,QAASvC,EACTyC,SAAUjE,GAEZ,CAAE+D,QAAStC,EAAmByC,SAAU5X,GACxC,CACEyX,QAASI,EAAAA,kBACTF,SAAU9D,EACViE,OAAO,0BA3BhBC,EAAAA,SAAQlV,KAAA,CAAC,CACRmV,QAAS,CAACC,EAAAA,cACVC,aAAc,GACdC,QAAS,OA6BXf,EApDA,GCGagB,EAAc,IAAIC,EAAAA,eAA2B","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Additional options that can be passt to tryLogin.\n */\nexport class LoginOptions {\n  /**\n   * Is called, after a token has been received and\n   * successfully validated.\n   *\n   * Deprecated:  Use property ``events`` on OAuthService instead.\n   */\n  onTokenReceived?: (receivedTokens: ReceivedTokens) => void;\n\n  /**\n   * Hook, to validate the received tokens.\n   *\n   * Deprecated:  Use property ``tokenValidationHandler`` on OAuthService instead.\n   */\n  validationHandler?: (receivedTokens: ReceivedTokens) => Promise<any>;\n\n  /**\n   * Called when tryLogin detects that the auth server\n   * included an error message into the hash fragment.\n   *\n   * Deprecated:  Use property ``events`` on OAuthService instead.\n   */\n  onLoginError?: (params: object) => void;\n\n  /**\n   * A custom hash fragment to be used instead of the\n   * actual one. This is used for silent refreshes, to\n   * pass the iframes hash fragment to this method.\n   */\n  customHashFragment?: string;\n\n  /**\n   * Set this to true to disable the oauth2 state\n   * check which is a best practice to avoid\n   * security attacks.\n   * As OIDC defines a nonce check that includes\n   * this, this can be set to true when only doing\n   * OIDC.\n   */\n  disableOAuth2StateCheck?: boolean;\n\n  /**\n   * Normally, you want to clear your hash fragment after\n   * the lib read the token(s) so that they are not displayed\n   * anymore in the url. If not, set this to true.\n   */\n  preventClearHashAfterLogin? = false;\n}\n\n/**\n * Defines the logging interface the OAuthService uses\n * internally. Is compatible with the `console` object,\n * but you can provide your own implementation as well\n * through dependency injection.\n */\nexport abstract class OAuthLogger {\n  abstract debug(message?: any, ...optionalParams: any[]): void;\n  abstract info(message?: any, ...optionalParams: any[]): void;\n  abstract log(message?: any, ...optionalParams: any[]): void;\n  abstract warn(message?: any, ...optionalParams: any[]): void;\n  abstract error(message?: any, ...optionalParams: any[]): void;\n}\n\n/**\n * Defines a simple storage that can be used for\n * storing the tokens at client side.\n * Is compatible to localStorage and sessionStorage,\n * but you can also create your own implementations.\n */\nexport abstract class OAuthStorage {\n  abstract getItem(key: string): string | null;\n  abstract removeItem(key: string): void;\n  abstract setItem(key: string, data: string): void;\n}\n\n/**\n * Represents the received tokens, the received state\n * and the parsed claims from the id-token.\n */\nexport class ReceivedTokens {\n  idToken: string;\n  accessToken: string;\n  idClaims?: object;\n  state?: string;\n}\n\n/**\n * Represents the parsed and validated id_token.\n */\nexport interface ParsedIdToken {\n  idToken: string;\n  idTokenClaims: object;\n  idTokenHeader: object;\n  idTokenClaimsJson: string;\n  idTokenHeaderJson: string;\n  idTokenExpiresAt: number;\n}\n\n/**\n * Represents the response from the token endpoint\n * http://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint\n */\nexport interface TokenResponse {\n  access_token: string;\n  id_token: string; \n  token_type: string;\n  expires_in: number;\n  refresh_token: string;\n  scope: string;\n  state?: string;\n}\n\n/**\n * Represents the response from the user info endpoint\n * http://openid.net/specs/openid-connect-core-1_0.html#UserInfo\n */\nexport interface UserInfo {\n  sub: string;\n  [key: string]: any;\n}\n\n/**\n * Represents an OpenID Connect discovery document\n */\nexport interface OidcDiscoveryDoc {\n  issuer: string;\n  authorization_endpoint: string;\n  token_endpoint: string;\n  token_endpoint_auth_methods_supported: string[];\n  token_endpoint_auth_signing_alg_values_supported: string[];\n  userinfo_endpoint: string;\n  check_session_iframe: string;\n  end_session_endpoint: string;\n  jwks_uri: string;\n  registration_endpoint: string;\n  scopes_supported: string[];\n  response_types_supported: string[];\n  acr_values_supported: string[];\n  response_modes_supported: string[];\n  grant_types_supported: string[];\n  subject_types_supported: string[];\n  userinfo_signing_alg_values_supported: string[];\n  userinfo_encryption_alg_values_supported: string[];\n  userinfo_encryption_enc_values_supported: string[];\n  id_token_signing_alg_values_supported: string[];\n  id_token_encryption_alg_values_supported: string[];\n  id_token_encryption_enc_values_supported: string[];\n  request_object_signing_alg_values_supported: string[];\n  display_values_supported: string[];\n  claim_types_supported: string[];\n  claims_supported: string[];\n  claims_parameter_supported: boolean;\n  service_documentation: string;\n  ui_locales_supported: string[];\n}\n","// see: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_.22Unicode_Problem.22\nexport function b64DecodeUnicode(str) {\n  const base64 = str.replace(/\\-/g, '+').replace(/\\_/g, '/');\n\n  return decodeURIComponent(\n    atob(base64)\n      .split('')\n      .map(function(c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      })\n      .join('')\n  );\n}\n\nexport function base64UrlEncode(str): string {\n  const base64 = btoa(str);\n  return base64\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n}","import { base64UrlEncode } from \"../base64-helper\";\n\nexport interface ValidationParams {\n  idToken: string;\n  accessToken: string;\n  idTokenHeader: object;\n  idTokenClaims: object;\n  jwks: object;\n  loadKeys: () => Promise<object>;\n}\n\n/**\n * Interface for Handlers that are hooked in to\n * validate tokens.\n */\nexport abstract class ValidationHandler {\n  /**\n   * Validates the signature of an id_token.\n   */\n  public abstract validateSignature(\n    validationParams: ValidationParams\n  ): Promise<any>;\n\n  /**\n   * Validates the at_hash in an id_token against the received access_token.\n   */\n  public abstract validateAtHash(validationParams: ValidationParams): Promise<boolean>;\n}\n\n/**\n * This abstract implementation of ValidationHandler already implements\n * the method validateAtHash. However, to make use of it,\n * you have to override the method calcHash.\n */\nexport abstract class AbstractValidationHandler implements ValidationHandler {\n  /**\n   * Validates the signature of an id_token.\n   */\n  abstract validateSignature(validationParams: ValidationParams): Promise<any>;\n\n  /**\n   * Validates the at_hash in an id_token against the received access_token.\n   */\n  async validateAtHash(params: ValidationParams): Promise<boolean> {\n    let hashAlg = this.inferHashAlgorithm(params.idTokenHeader);\n\n    let tokenHash = await this.calcHash(params.accessToken, hashAlg); // sha256(accessToken, { asString: true });\n\n    let leftMostHalf = tokenHash.substr(0, tokenHash.length / 2);\n\n    let atHash = base64UrlEncode(leftMostHalf);\n\n    let claimsAtHash = params.idTokenClaims['at_hash'].replace(/=/g, '');\n\n    if (atHash !== claimsAtHash) {\n      console.error('exptected at_hash: ' + atHash);\n      console.error('actual at_hash: ' + claimsAtHash);\n    }\n\n    return atHash === claimsAtHash;\n  }\n\n  /**\n   * Infers the name of the hash algorithm to use\n   * from the alg field of an id_token.\n   *\n   * @param jwtHeader the id_token's parsed header\n   */\n  protected inferHashAlgorithm(jwtHeader: object): string {\n    let alg: string = jwtHeader['alg'];\n\n    if (!alg.match(/^.S[0-9]{3}$/)) {\n      throw new Error('Algorithm not supported: ' + alg);\n    }\n\n    return 'sha-' + alg.substr(2);\n  }\n\n  /**\n   * Calculates the hash for the passed value by using\n   * the passed hash algorithm.\n   *\n   * @param valueToHash\n   * @param algorithm\n   */\n  protected abstract calcHash(valueToHash: string, algorithm: string): Promise<string>;\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class UrlHelperService {\n  public getHashFragmentParams(customHashFragment?: string): object {\n    let hash = customHashFragment || window.location.hash;\n\n    hash = decodeURIComponent(hash);\n\n    if (hash.indexOf('#') !== 0) {\n      return {};\n    }\n\n    const questionMarkPosition = hash.indexOf('?');\n\n    if (questionMarkPosition > -1) {\n      hash = hash.substr(questionMarkPosition + 1);\n    } else {\n      hash = hash.substr(1);\n    }\n\n    return this.parseQueryString(hash);\n  }\n\n  public parseQueryString(queryString: string): object {\n    const data = {};\n    let\n      pairs,\n      pair,\n      separatorIndex,\n      escapedKey,\n      escapedValue,\n      key,\n      value;\n\n    if (queryString === null) {\n      return data;\n    }\n\n    pairs = queryString.split('&');\n\n    for (let i = 0; i < pairs.length; i++) {\n      pair = pairs[i];\n      separatorIndex = pair.indexOf('=');\n\n      if (separatorIndex === -1) {\n        escapedKey = pair;\n        escapedValue = null;\n      } else {\n        escapedKey = pair.substr(0, separatorIndex);\n        escapedValue = pair.substr(separatorIndex + 1);\n      }\n\n      key = decodeURIComponent(escapedKey);\n      value = decodeURIComponent(escapedValue);\n\n      if (key.substr(0, 1) === '/') { key = key.substr(1); }\n\n      data[key] = value;\n    }\n\n    return data;\n  }\n}\n","export type EventType =\n  | 'discovery_document_loaded'\n  | 'received_first_token'\n  | 'jwks_load_error'\n  | 'invalid_nonce_in_state'\n  | 'discovery_document_load_error'\n  | 'discovery_document_validation_error'\n  | 'user_profile_loaded'\n  | 'user_profile_load_error'\n  | 'token_received'\n  | 'token_error'\n  | 'code_error'\n  | 'token_refreshed'\n  | 'token_refresh_error'\n  | 'silent_refresh_error'\n  | 'silently_refreshed'\n  | 'silent_refresh_timeout'\n  | 'token_validation_error'\n  | 'token_expires'\n  | 'session_changed'\n  | 'session_error'\n  | 'session_terminated'\n  | 'logout';\n\nexport abstract class OAuthEvent {\n  constructor(readonly type: EventType) {}\n}\n\nexport class OAuthSuccessEvent extends OAuthEvent {\n  constructor(type: EventType, readonly info: any = null) {\n    super(type);\n  }\n}\n\nexport class OAuthInfoEvent extends OAuthEvent {\n  constructor(type: EventType, readonly info: any = null) {\n    super(type);\n  }\n}\n\nexport class OAuthErrorEvent extends OAuthEvent {\n  constructor(\n    type: EventType,\n    readonly reason: object,\n    readonly params: object = null\n  ) {\n    super(type);\n  }\n}\n","export class AuthConfig {\n  /**\n   * The client's id as registered with the auth server\n   */\n  public clientId? = '';\n\n  /**\n   * The client's redirectUri as registered with the auth server\n   */\n  public redirectUri? = '';\n\n  /**\n   * An optional second redirectUri where the auth server\n   * redirects the user to after logging out.\n   */\n  public postLogoutRedirectUri? = '';\n\n  /**\n   * The auth server's endpoint that allows to log\n   * the user in when using implicit flow.\n   */\n  public loginUrl? = '';\n\n  /**\n   * The requested scopes\n   */\n  public scope? = 'openid profile';\n\n  public resource? = '';\n\n  public rngUrl? = '';\n\n  /**\n   * Defines whether to use OpenId Connect during\n   * implicit flow.\n   */\n  public oidc? = true;\n\n  /**\n   * Defines whether to request an access token during\n   * implicit flow.\n   */\n  public requestAccessToken? = true;\n\n  public options?: any = null;\n\n  /**\n   * The issuer's uri.\n   */\n  public issuer? = '';\n\n  /**\n   * The logout url.\n   */\n  public logoutUrl? = '';\n\n  /**\n   * Defines whether to clear the hash fragment after logging in.\n   */\n  public clearHashAfterLogin? = true;\n\n  /**\n   * Url of the token endpoint as defined by OpenId Connect and OAuth 2.\n   */\n  public tokenEndpoint?: string = null;\n\n  /**\n   * Url of the userinfo endpoint as defined by OpenId Connect.\n   */\n  public userinfoEndpoint?: string = null;\n\n  public responseType? = '';\n\n  /**\n   * Defines whether additional debug information should\n   * be shown at the console. Note that in certain browsers\n   * the verbosity of the console needs to be explicitly set\n   * to include Debug level messages.\n   */\n   public showDebugInformation? = false;\n\n  /**\n   * The redirect uri used when doing silent refresh.\n   */\n  public silentRefreshRedirectUri? = '';\n\n  public silentRefreshMessagePrefix? = '';\n\n  /**\n   * Set this to true to display the iframe used for\n   * silent refresh for debugging.\n   */\n  public silentRefreshShowIFrame? = false;\n\n  /**\n   * Timeout for silent refresh.\n   * @internal\n   * depreacted b/c of typo, see silentRefreshTimeout\n   */\n  public siletRefreshTimeout?: number = 1000 * 20;\n\n  /**\n   * Timeout for silent refresh.\n   */\n  public silentRefreshTimeout?: number = 1000 * 20;\n\n  /**\n   * Some auth servers don't allow using password flow\n   * w/o a client secret while the standards do not\n   * demand for it. In this case, you can set a password\n   * here. As this password is exposed to the public\n   * it does not bring additional security and is therefore\n   * as good as using no password.\n   */\n  public dummyClientSecret?: string = null;\n\n  /**\n   * Defines whether https is required.\n   * The default value is remoteOnly which only allows\n   * http for localhost, while every other domains need\n   * to be used with https.\n   */\n  public requireHttps?: boolean | 'remoteOnly' = 'remoteOnly';\n\n  /**\n   * Defines whether every url provided by the discovery\n   * document has to start with the issuer's url.\n   */\n  public strictDiscoveryDocumentValidation? = true;\n\n  /**\n   * JSON Web Key Set (https://tools.ietf.org/html/rfc7517)\n   * with keys used to validate received id_tokens.\n   * This is taken out of the disovery document. Can be set manually too.\n   */\n  public jwks?: object = null;\n\n  /**\n   * Map with additional query parameter that are appended to\n   * the request when initializing implicit flow.\n   */\n  public customQueryParams?: object = null;\n\n  public silentRefreshIFrameName? = 'angular-oauth-oidc-silent-refresh-iframe';\n\n  /**\n   * Defines when the token_timeout event should be raised.\n   * If you set this to the default value 0.75, the event\n   * is triggered after 75% of the token's life time.\n   */\n  public timeoutFactor? = 0.75;\n\n  /**\n   * If true, the lib will try to check whether the user\n   * is still logged in on a regular basis as described\n   * in http://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification\n   */\n  public sessionChecksEnabled? = false;\n\n  /**\n   * Interval in msec for checking the session\n   * according to http://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification\n   */\n  public sessionCheckIntervall? = 3 * 1000;\n\n  /**\n   * Url for the iframe used for session checks\n   */\n  public sessionCheckIFrameUrl?: string = null;\n\n  /**\n   * Name of the iframe to use for session checks\n   */\n  public sessionCheckIFrameName? = 'angular-oauth-oidc-check-session-iframe';\n\n  /**\n   * This property has been introduced to disable at_hash checks\n   * and is indented for Identity Provider that does not deliver\n   * an at_hash EVEN THOUGH its recommended by the OIDC specs.\n   * Of course, when disabling these checks the we are bypassing\n   * a security check which means we are more vulnerable.\n   */\n  public disableAtHashCheck? = false;\n\n  /**\n   * Defines wether to check the subject of a refreshed token after silent refresh.\n   * Normally, it should be the same as before.\n   */\n  public skipSubjectCheck? = false;\n\n  public useIdTokenHintForSilentRefresh? = false;\n\n  /**\n   * Defined whether to skip the validation of the issuer in the discovery document.\n   * Normally, the discovey document's url starts with the url of the issuer.\n   */\n  public skipIssuerCheck? = false;\n\n  /**\n   * According to rfc6749 it is recommended (but not required) that the auth\n   * server exposes the access_token's life time in seconds.\n   * This is a fallback value for the case this value is not exposed.\n   */\n  public fallbackAccessTokenExpirationTimeInSec?: number;\n\n  /**\n   * final state sent to issuer is built as follows:\n   * state = nonce + nonceStateSeparator + additional state\n   * Default separator is ';' (encoded %3B).\n   * In rare cases, this character might be forbidden or inconvenient to use by the issuer so it can be customized.\n   */\n  public nonceStateSeparator? = ';';\n\n  /**\n   * Set this to true to use HTTP BASIC auth for password flow\n   */\n  public useHttpBasicAuth? = false;\n\n  /**\n   * The window of time (in seconds) to allow the current time to deviate when validating id_token's iat and exp values.\n   */\n  public clockSkewInSec?: 600;\n\n  /**\n   * Code Flow is by defauld used together with PKCI which is also higly recommented.\n   * You can disbale it here by setting this flag to true.\n   * https://tools.ietf.org/html/rfc7636#section-1.1\n   */\n  public disablePKCE? = false;\n\n  constructor(json?: Partial<AuthConfig>) {\n    if (json) {\n      Object.assign(this, json);\n    }\n  }\n\n  /**\n   * This property allows you to override the method that is used to open the login url,\n   * allowing a way for implementations to specify their own method of routing to new\n   * urls.\n   */\n  public openUri?: ((uri: string) => void) = uri => {\n    location.href = uri;\n  }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n/**\n * This custom encoder allows charactes like +, % and / to be used in passwords\n */\nexport class WebHttpUrlEncodingCodec implements HttpParameterCodec {\n  encodeKey(k: string): string {\n    return encodeURIComponent(k);\n  }\n\n  encodeValue(v: string): string {\n    return encodeURIComponent(v);\n  }\n\n  decodeKey(k: string): string {\n    return decodeURIComponent(k);\n  }\n\n  decodeValue(v: string) {\n    return decodeURIComponent(v);\n  }\n}\n","/**\n * Abstraction for crypto algorithms\n*/\nexport abstract class CryptoHandler {\n\n    abstract calcHash(valueToHash: string, algorithm: string): Promise<string>;\n\n}","import { Injectable, NgZone, Optional, OnDestroy } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, Subject, Subscription, of, race, from } from 'rxjs';\nimport { filter, delay, first, tap, map, switchMap } from 'rxjs/operators';\n\nimport {\n    ValidationHandler,\n    ValidationParams\n} from './token-validation/validation-handler';\nimport { UrlHelperService } from './url-helper.service';\nimport {\n    OAuthEvent,\n    OAuthInfoEvent,\n    OAuthErrorEvent,\n    OAuthSuccessEvent\n} from './events';\nimport {\n    OAuthLogger,\n    OAuthStorage,\n    LoginOptions,\n    ParsedIdToken,\n    OidcDiscoveryDoc,\n    TokenResponse,\n    UserInfo\n} from './types';\nimport { b64DecodeUnicode, base64UrlEncode } from './base64-helper';\nimport { AuthConfig } from './auth.config';\nimport { WebHttpUrlEncodingCodec } from './encoder';\nimport { CryptoHandler } from './token-validation/crypto-handler';\n\n/**\n * Service for logging in and logging out with\n * OIDC and OAuth2. Supports implicit flow and\n * password flow.\n */\n@Injectable()\nexport class OAuthService extends AuthConfig implements OnDestroy {\n    // Extending AuthConfig ist just for LEGACY reasons\n    // to not break existing code.\n\n    /**\n     * The ValidationHandler used to validate received\n     * id_tokens.\n     */\n    public tokenValidationHandler: ValidationHandler;\n\n    /**\n     * @internal\n     * Deprecated:  use property events instead\n     */\n    public discoveryDocumentLoaded = false;\n\n    /**\n     * @internal\n     * Deprecated:  use property events instead\n     */\n    public discoveryDocumentLoaded$: Observable<object>;\n\n    /**\n     * Informs about events, like token_received or token_expires.\n     * See the string enum EventType for a full list of event types.\n     */\n    public events: Observable<OAuthEvent>;\n\n    /**\n     * The received (passed around) state, when logging\n     * in with implicit flow.\n     */\n    public state? = '';\n\n    protected eventsSubject: Subject<OAuthEvent> = new Subject<OAuthEvent>();\n    protected discoveryDocumentLoadedSubject: Subject<object> = new Subject<object>();\n    protected silentRefreshPostMessageEventListener: EventListener;\n    protected grantTypesSupported: Array<string> = [];\n    protected _storage: OAuthStorage;\n    protected accessTokenTimeoutSubscription: Subscription;\n    protected idTokenTimeoutSubscription: Subscription;\n    protected sessionCheckEventListener: EventListener;\n    protected jwksUri: string;\n    protected sessionCheckTimer: any;\n    protected silentRefreshSubject: string;\n    protected inImplicitFlow = false;\n\n    constructor(\n        protected ngZone: NgZone,\n        protected http: HttpClient,\n        @Optional() storage: OAuthStorage,\n        @Optional() tokenValidationHandler: ValidationHandler,\n        @Optional() protected config: AuthConfig,\n        protected urlHelper: UrlHelperService,\n        protected logger: OAuthLogger,\n        @Optional() protected crypto: CryptoHandler,\n    ) {\n        super();\n\n        this.debug('angular-oauth2-oidc v8-beta');\n\n        this.discoveryDocumentLoaded$ = this.discoveryDocumentLoadedSubject.asObservable();\n        this.events = this.eventsSubject.asObservable();\n\n        if (tokenValidationHandler) {\n            this.tokenValidationHandler = tokenValidationHandler;\n        }\n\n        if (config) {\n            this.configure(config);\n        }\n\n        try {\n            if (storage) {\n                this.setStorage(storage);\n            } else if (typeof sessionStorage !== 'undefined') {\n                this.setStorage(sessionStorage);\n            }\n        } catch (e) {\n\n            console.error(\n                'No OAuthStorage provided and cannot access default (sessionStorage).'\n                + 'Consider providing a custom OAuthStorage implementation in your module.',\n                e\n            );\n        }\n\n        this.setupRefreshTimer();\n    }\n\n    /**\n     * Use this method to configure the service\n     * @param config the configuration\n     */\n    public configure(config: AuthConfig) {\n        // For the sake of downward compatibility with\n        // original configuration API\n        Object.assign(this, new AuthConfig(), config);\n\n        this.config = Object.assign({} as AuthConfig, new AuthConfig(), config);\n\n        if (this.sessionChecksEnabled) {\n            this.setupSessionCheck();\n        }\n\n        this.configChanged();\n    }\n\n    protected configChanged(): void {\n        this.setupRefreshTimer();\n    }\n\n    public restartSessionChecksIfStillLoggedIn(): void {\n        if (this.hasValidIdToken()) {\n            this.initSessionCheck();\n        }\n    }\n\n    protected restartRefreshTimerIfStillLoggedIn(): void {\n        this.setupExpirationTimers();\n    }\n\n    protected setupSessionCheck() {\n        this.events.pipe(filter(e => e.type === 'token_received')).subscribe(e => {\n            this.initSessionCheck();\n        });\n    }\n\n    /**\n     * Will setup up silent refreshing for when the token is\n     * about to expire. When the user is logged out via this.logOut method, the\n     * silent refreshing will pause and not refresh the tokens until the user is\n     * logged back in via receiving a new token.\n     * @param params Additional parameter to pass\n     * @param listenTo Setup automatic refresh of a specific token type\n     */\n    public setupAutomaticSilentRefresh(params: object = {}, listenTo?: 'access_token' | 'id_token' | 'any', noPrompt = true) {\n      let shouldRunSilentRefresh = true;\n      this.events.pipe(\n        tap((e) => {\n          if (e.type === 'token_received') {\n            shouldRunSilentRefresh = true;\n          } else if (e.type === 'logout') {\n            shouldRunSilentRefresh = false;\n          }\n        }),\n        filter(e => e.type === 'token_expires')\n      ).subscribe(e => {\n        const event = e as OAuthInfoEvent;\n        if ((listenTo == null || listenTo === 'any' || event.info === listenTo) && shouldRunSilentRefresh) {\n          // this.silentRefresh(params, noPrompt).catch(_ => {\n          this.refreshInternal(params, noPrompt).catch(_ => {\n            this.debug('Automatic silent refresh did not work');\n          });\n        }\n      });\n\n      this.restartRefreshTimerIfStillLoggedIn();\n    }\n\n    protected refreshInternal(params, noPrompt) {\n        if (this.responseType === 'code') {\n            return this.refreshToken();\n        } else {\n            return this.silentRefresh(params, noPrompt);\n        }\n    }\n\n    /**\n     * Convenience method that first calls `loadDiscoveryDocument(...)` and\n     * directly chains using the `then(...)` part of the promise to call\n     * the `tryLogin(...)` method.\n     *\n     * @param options LoginOptions to pass through to `tryLogin(...)`\n     */\n    public loadDiscoveryDocumentAndTryLogin(options: LoginOptions = null): Promise<boolean> {\n        return this.loadDiscoveryDocument().then(doc => {\n            return this.tryLogin(options);\n        });\n    }\n\n    /**\n     * Convenience method that first calls `loadDiscoveryDocumentAndTryLogin(...)`\n     * and if then chains to `initImplicitFlow()`, but only if there is no valid\n     * IdToken or no valid AccessToken.\n     *\n     * @param options LoginOptions to pass through to `tryLogin(...)`\n     */\n    public loadDiscoveryDocumentAndLogin(options: LoginOptions = null): Promise<boolean> {\n        return this.loadDiscoveryDocumentAndTryLogin(options).then(_ => {\n            if (!this.hasValidIdToken() || !this.hasValidAccessToken()) {\n                this.initImplicitFlow();\n                return false;\n            } else {\n                return true;\n            }\n        });\n    }\n\n    protected debug(...args): void {\n        if (this.showDebugInformation) {\n            this.logger.debug.apply(console, args);\n        }\n    }\n\n    protected validateUrlFromDiscoveryDocument(url: string): string[] {\n        const errors: string[] = [];\n        const httpsCheck = this.validateUrlForHttps(url);\n        const issuerCheck = this.validateUrlAgainstIssuer(url);\n\n        if (!httpsCheck) {\n            errors.push(\n                'https for all urls required. Also for urls received by discovery.'\n            );\n        }\n\n        if (!issuerCheck) {\n            errors.push(\n                'Every url in discovery document has to start with the issuer url.' +\n                'Also see property strictDiscoveryDocumentValidation.'\n            );\n        }\n\n        return errors;\n    }\n\n    protected validateUrlForHttps(url: string): boolean {\n        if (!url) {\n            return true;\n        }\n\n        const lcUrl = url.toLowerCase();\n\n        if (this.requireHttps === false) {\n            return true;\n        }\n\n        if (\n            (lcUrl.match(/^http:\\/\\/localhost($|[:\\/])/) ||\n                lcUrl.match(/^http:\\/\\/localhost($|[:\\/])/)) &&\n            this.requireHttps === 'remoteOnly'\n        ) {\n            return true;\n        }\n\n        return lcUrl.startsWith('https://');\n    }\n\n    protected validateUrlAgainstIssuer(url: string) {\n        if (!this.strictDiscoveryDocumentValidation) {\n            return true;\n        }\n        if (!url) {\n            return true;\n        }\n        return url.toLowerCase().startsWith(this.issuer.toLowerCase());\n    }\n\n    protected setupRefreshTimer(): void {\n        if (typeof window === 'undefined') {\n            this.debug('timer not supported on this plattform');\n            return;\n        }\n\n        if (this.hasValidIdToken()) {\n            this.clearAccessTokenTimer();\n            this.clearIdTokenTimer();\n            this.setupExpirationTimers();\n        }\n\n        this.events.pipe(filter(e => e.type === 'token_received')).subscribe(_ => {\n            this.clearAccessTokenTimer();\n            this.clearIdTokenTimer();\n            this.setupExpirationTimers();\n        });\n    }\n\n    protected setupExpirationTimers(): void {\n        const idTokenExp = this.getIdTokenExpiration() || Number.MAX_VALUE;\n        const accessTokenExp = this.getAccessTokenExpiration() || Number.MAX_VALUE;\n        const useAccessTokenExp = accessTokenExp <= idTokenExp;\n\n        if (this.hasValidAccessToken() && useAccessTokenExp) {\n            this.setupAccessTokenTimer();\n        }\n\n        if (this.hasValidIdToken() && !useAccessTokenExp) {\n            this.setupIdTokenTimer();\n        }\n    }\n\n    protected setupAccessTokenTimer(): void {\n        const expiration = this.getAccessTokenExpiration();\n        const storedAt = this.getAccessTokenStoredAt();\n        const timeout = this.calcTimeout(storedAt, expiration);\n\n        this.ngZone.runOutsideAngular(() => {\n            this.accessTokenTimeoutSubscription = of(\n                new OAuthInfoEvent('token_expires', 'access_token')\n            )\n                .pipe(delay(timeout))\n                .subscribe(e => {\n                    this.ngZone.run(() => {\n                        this.eventsSubject.next(e);\n                    });\n                });\n        });\n    }\n\n    protected setupIdTokenTimer(): void {\n        const expiration = this.getIdTokenExpiration();\n        const storedAt = this.getIdTokenStoredAt();\n        const timeout = this.calcTimeout(storedAt, expiration);\n\n        this.ngZone.runOutsideAngular(() => {\n            this.idTokenTimeoutSubscription = of(\n                new OAuthInfoEvent('token_expires', 'id_token')\n            )\n                .pipe(delay(timeout))\n                .subscribe(e => {\n                    this.ngZone.run(() => {\n                        this.eventsSubject.next(e);\n                    });\n                });\n        });\n    }\n\n    protected clearAccessTokenTimer(): void {\n        if (this.accessTokenTimeoutSubscription) {\n            this.accessTokenTimeoutSubscription.unsubscribe();\n        }\n    }\n\n    protected clearIdTokenTimer(): void {\n        if (this.idTokenTimeoutSubscription) {\n            this.idTokenTimeoutSubscription.unsubscribe();\n        }\n    }\n\n    protected calcTimeout(storedAt: number, expiration: number): number {\n        const now = Date.now();\n        const delta = (expiration - storedAt) * this.timeoutFactor - (now - storedAt);\n        return Math.max(0, delta);\n    }\n\n    /**\n     * DEPRECATED. Use a provider for OAuthStorage instead:\n     *\n     * { provide: OAuthStorage, useFactory: oAuthStorageFactory }\n     * export function oAuthStorageFactory(): OAuthStorage { return localStorage; }\n     * Sets a custom storage used to store the received\n     * tokens on client side. By default, the browser's\n     * sessionStorage is used.\n     * @ignore\n     *\n     * @param storage\n     */\n    public setStorage(storage: OAuthStorage): void {\n        this._storage = storage;\n        this.configChanged();\n    }\n\n    /**\n     * Loads the discovery document to configure most\n     * properties of this service. The url of the discovery\n     * document is infered from the issuer's url according\n     * to the OpenId Connect spec. To use another url you\n     * can pass it to to optional parameter fullUrl.\n     *\n     * @param fullUrl\n     */\n    public loadDiscoveryDocument(fullUrl: string = null): Promise<object> {\n        return new Promise((resolve, reject) => {\n            if (!fullUrl) {\n                fullUrl = this.issuer || '';\n                if (!fullUrl.endsWith('/')) {\n                    fullUrl += '/';\n                }\n                fullUrl += '.well-known/openid-configuration';\n            }\n\n            if (!this.validateUrlForHttps(fullUrl)) {\n                reject('issuer must use https, or config value for property requireHttps must allow http');\n                return;\n            }\n\n            this.http.get<OidcDiscoveryDoc>(fullUrl).subscribe(\n                doc => {\n                    if (!this.validateDiscoveryDocument(doc)) {\n                        this.eventsSubject.next(\n                            new OAuthErrorEvent('discovery_document_validation_error', null)\n                        );\n                        reject('discovery_document_validation_error');\n                        return;\n                    }\n\n                    this.loginUrl = doc.authorization_endpoint;\n                    this.logoutUrl = doc.end_session_endpoint || this.logoutUrl;\n                    this.grantTypesSupported = doc.grant_types_supported;\n                    this.issuer = doc.issuer;\n                    this.tokenEndpoint = doc.token_endpoint;\n                    this.userinfoEndpoint = doc.userinfo_endpoint;\n                    this.jwksUri = doc.jwks_uri;\n                    this.sessionCheckIFrameUrl = doc.check_session_iframe || this.sessionCheckIFrameUrl;\n\n                    this.discoveryDocumentLoaded = true;\n                    this.discoveryDocumentLoadedSubject.next(doc);\n\n                    if (this.sessionChecksEnabled) {\n                        this.restartSessionChecksIfStillLoggedIn();\n                    }\n\n                    this.loadJwks()\n                        .then(jwks => {\n                            const result: object = {\n                                discoveryDocument: doc,\n                                jwks: jwks\n                            };\n\n                            const event = new OAuthSuccessEvent(\n                                'discovery_document_loaded',\n                                result\n                            );\n                            this.eventsSubject.next(event);\n                            resolve(event);\n                            return;\n                        })\n                        .catch(err => {\n                            this.eventsSubject.next(\n                                new OAuthErrorEvent('discovery_document_load_error', err)\n                            );\n                            reject(err);\n                            return;\n                        });\n                },\n                err => {\n                    this.logger.error('error loading discovery document', err);\n                    this.eventsSubject.next(\n                        new OAuthErrorEvent('discovery_document_load_error', err)\n                    );\n                    reject(err);\n                }\n            );\n        });\n    }\n\n    protected loadJwks(): Promise<object> {\n        return new Promise<object>((resolve, reject) => {\n            if (this.jwksUri) {\n                this.http.get(this.jwksUri).subscribe(\n                    jwks => {\n                        this.jwks = jwks;\n                        this.eventsSubject.next(\n                            new OAuthSuccessEvent('discovery_document_loaded')\n                        );\n                        resolve(jwks);\n                    },\n                    err => {\n                        this.logger.error('error loading jwks', err);\n                        this.eventsSubject.next(\n                            new OAuthErrorEvent('jwks_load_error', err)\n                        );\n                        reject(err);\n                    }\n                );\n            } else {\n                resolve(null);\n            }\n        });\n    }\n\n    protected validateDiscoveryDocument(doc: OidcDiscoveryDoc): boolean {\n        let errors: string[];\n\n        if (!this.skipIssuerCheck && doc.issuer !== this.issuer) {\n            this.logger.error(\n                'invalid issuer in discovery document',\n                'expected: ' + this.issuer,\n                'current: ' + doc.issuer\n            );\n            return false;\n        }\n\n        errors = this.validateUrlFromDiscoveryDocument(doc.authorization_endpoint);\n        if (errors.length > 0) {\n            this.logger.error(\n                'error validating authorization_endpoint in discovery document',\n                errors\n            );\n            return false;\n        }\n\n        errors = this.validateUrlFromDiscoveryDocument(doc.end_session_endpoint);\n        if (errors.length > 0) {\n            this.logger.error(\n                'error validating end_session_endpoint in discovery document',\n                errors\n            );\n            return false;\n        }\n\n        errors = this.validateUrlFromDiscoveryDocument(doc.token_endpoint);\n        if (errors.length > 0) {\n            this.logger.error(\n                'error validating token_endpoint in discovery document',\n                errors\n            );\n        }\n\n        errors = this.validateUrlFromDiscoveryDocument(doc.userinfo_endpoint);\n        if (errors.length > 0) {\n            this.logger.error(\n                'error validating userinfo_endpoint in discovery document',\n                errors\n            );\n            return false;\n        }\n\n        errors = this.validateUrlFromDiscoveryDocument(doc.jwks_uri);\n        if (errors.length > 0) {\n            this.logger.error('error validating jwks_uri in discovery document', errors);\n            return false;\n        }\n\n        if (this.sessionChecksEnabled && !doc.check_session_iframe) {\n            this.logger.warn(\n                'sessionChecksEnabled is activated but discovery document' +\n                ' does not contain a check_session_iframe field'\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     * Uses password flow to exchange userName and password for an\n     * access_token. After receiving the access_token, this method\n     * uses it to query the userinfo endpoint in order to get information\n     * about the user in question.\n     *\n     * When using this, make sure that the property oidc is set to false.\n     * Otherwise stricter validations take place that make this operation\n     * fail.\n     *\n     * @param userName\n     * @param password\n     * @param headers Optional additional http-headers.\n     */\n    public fetchTokenUsingPasswordFlowAndLoadUserProfile(\n        userName: string,\n        password: string,\n        headers: HttpHeaders = new HttpHeaders()\n    ): Promise<object> {\n        return this.fetchTokenUsingPasswordFlow(userName, password, headers).then(\n            () => this.loadUserProfile()\n        );\n    }\n\n    /**\n     * Loads the user profile by accessing the user info endpoint defined by OpenId Connect.\n     *\n     * When using this with OAuth2 password flow, make sure that the property oidc is set to false.\n     * Otherwise stricter validations take place that make this operation fail.\n     */\n    public loadUserProfile(): Promise<object> {\n        if (!this.hasValidAccessToken()) {\n            throw new Error('Can not load User Profile without access_token');\n        }\n        if (!this.validateUrlForHttps(this.userinfoEndpoint)) {\n            throw new Error(\n                'userinfoEndpoint must use https, or config value for property requireHttps must allow http'\n            );\n        }\n\n        return new Promise((resolve, reject) => {\n            const headers = new HttpHeaders().set(\n                'Authorization',\n                'Bearer ' + this.getAccessToken()\n            );\n\n            this.http.get<UserInfo>(this.userinfoEndpoint, { headers }).subscribe(\n                info => {\n                    this.debug('userinfo received', info);\n\n                    const existingClaims = this.getIdentityClaims() || {};\n\n                    if (!this.skipSubjectCheck) {\n                        if (\n                            this.oidc &&\n                            (!existingClaims['sub'] || info.sub !== existingClaims['sub'])\n                        ) {\n                            const err =\n                                'if property oidc is true, the received user-id (sub) has to be the user-id ' +\n                                'of the user that has logged in with oidc.\\n' +\n                                'if you are not using oidc but just oauth2 password flow set oidc to false';\n\n                            reject(err);\n                            return;\n                        }\n                    }\n\n                    info = Object.assign({}, existingClaims, info);\n\n                    this._storage.setItem('id_token_claims_obj', JSON.stringify(info));\n                    this.eventsSubject.next(new OAuthSuccessEvent('user_profile_loaded'));\n                    resolve(info);\n                },\n                err => {\n                    this.logger.error('error loading user info', err);\n                    this.eventsSubject.next(\n                        new OAuthErrorEvent('user_profile_load_error', err)\n                    );\n                    reject(err);\n                }\n            );\n        });\n    }\n\n    /**\n     * Uses password flow to exchange userName and password for an access_token.\n     * @param userName\n     * @param password\n     * @param headers Optional additional http-headers.\n     */\n    public fetchTokenUsingPasswordFlow(\n        userName: string,\n        password: string,\n        headers: HttpHeaders = new HttpHeaders()\n    ): Promise<object> {\n        if (!this.validateUrlForHttps(this.tokenEndpoint)) {\n            throw new Error(\n                'tokenEndpoint must use https, or config value for property requireHttps must allow http'\n            );\n        }\n\n        return new Promise((resolve, reject) => {\n            /**\n             * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n             * serialize and parse URL parameter keys and values.\n             *\n             * @stable\n             */\n            let params = new HttpParams({ encoder: new WebHttpUrlEncodingCodec() })\n                .set('grant_type', 'password')\n                .set('scope', this.scope)\n                .set('username', userName)\n                .set('password', password);\n\n            if (this.useHttpBasicAuth) {\n                const header = btoa(`${this.clientId}:${this.dummyClientSecret}`);\n                headers = headers.set(\n                    'Authorization',\n                    'Basic ' + header);\n            }\n\n            if (!this.useHttpBasicAuth) {\n                params = params.set('client_id', this.clientId);\n            }\n\n            if (!this.useHttpBasicAuth && this.dummyClientSecret) {\n                params = params.set('client_secret', this.dummyClientSecret);\n            }\n\n            if (this.customQueryParams) {\n                for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\n                    params = params.set(key, this.customQueryParams[key]);\n                }\n            }\n\n            headers = headers.set(\n                'Content-Type',\n                'application/x-www-form-urlencoded'\n            );\n\n            this.http\n                .post<TokenResponse>(this.tokenEndpoint, params, { headers })\n                .subscribe(\n                    tokenResponse => {\n                        this.debug('tokenResponse', tokenResponse);\n                        this.storeAccessTokenResponse(\n                            tokenResponse.access_token,\n                            tokenResponse.refresh_token,\n                            tokenResponse.expires_in,\n                            tokenResponse.scope\n                        );\n\n                        this.storeAdditionalParameters(tokenResponse);\n\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\n                        resolve(tokenResponse);\n                    },\n                    err => {\n                        this.logger.error('Error performing password flow', err);\n                        this.eventsSubject.next(new OAuthErrorEvent('token_error', err));\n                        reject(err);\n                    }\n                );\n        });\n    }\n\n    /**\n     * Refreshes the token using a refresh_token.\n     * This does not work for implicit flow, b/c\n     * there is no refresh_token in this flow.\n     * A solution for this is provided by the\n     * method silentRefresh.\n     */\n    public refreshToken(): Promise<object> {\n\n        if (!this.validateUrlForHttps(this.tokenEndpoint)) {\n            throw new Error(\n                'tokenEndpoint must use https, or config value for property requireHttps must allow http'\n            );\n        }\n\n        return new Promise((resolve, reject) => {\n            let params = new HttpParams()\n                .set('grant_type', 'refresh_token')\n                .set('client_id', this.clientId)\n                .set('scope', this.scope)\n                .set('refresh_token', this._storage.getItem('refresh_token'));\n\n            if (this.dummyClientSecret) {\n                params = params.set('client_secret', this.dummyClientSecret);\n            }\n\n            if (this.customQueryParams) {\n                for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\n                    params = params.set(key, this.customQueryParams[key]);\n                }\n            }\n\n            const headers = new HttpHeaders().set(\n                'Content-Type',\n                'application/x-www-form-urlencoded'\n            );\n\n            this.http\n                .post<TokenResponse>(this.tokenEndpoint, params, { headers })\n                .pipe(switchMap(tokenResponse => {\n                    if (tokenResponse.id_token) {\n                        return from(this.processIdToken(tokenResponse.id_token, tokenResponse.access_token, true))\n                            .pipe(\n                                tap(result => this.storeIdToken(result)),\n                                map(_ => tokenResponse)\n                            );\n                    }\n                    else {\n                        return of(tokenResponse);\n                    }\n                }))\n                .subscribe(\n                    tokenResponse => {\n                        this.debug('refresh tokenResponse', tokenResponse);\n                        this.storeAccessTokenResponse(\n                            tokenResponse.access_token,\n                            tokenResponse.refresh_token,\n                            tokenResponse.expires_in,\n                            tokenResponse.scope\n                        );\n\n                        this.storeAdditionalParameters(tokenResponse);\n\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_refreshed'));\n                        resolve(tokenResponse);\n                    },\n                    err => {\n                        this.logger.error('Error performing password flow', err);\n                        this.eventsSubject.next(\n                            new OAuthErrorEvent('token_refresh_error', err)\n                        );\n                        reject(err);\n                    }\n                );\n        });\n    }\n\n    protected removeSilentRefreshEventListener(): void {\n        if (this.silentRefreshPostMessageEventListener) {\n            window.removeEventListener(\n                'message',\n                this.silentRefreshPostMessageEventListener\n            );\n            this.silentRefreshPostMessageEventListener = null;\n        }\n    }\n\n    protected setupSilentRefreshEventListener(): void {\n        this.removeSilentRefreshEventListener();\n\n        this.silentRefreshPostMessageEventListener = (e: MessageEvent) => {\n            const message = this.processMessageEventMessage(e);\n\n            this.tryLogin({\n                customHashFragment: message,\n                preventClearHashAfterLogin: true,\n                onLoginError: err => {\n                    this.eventsSubject.next(\n                        new OAuthErrorEvent('silent_refresh_error', err)\n                    );\n                },\n                onTokenReceived: () => {\n                    this.eventsSubject.next(new OAuthSuccessEvent('silently_refreshed'));\n                }\n            }).catch(err => this.debug('tryLogin during silent refresh failed', err));\n        };\n\n        window.addEventListener(\n            'message',\n            this.silentRefreshPostMessageEventListener\n        );\n    }\n\n    /**\n     * Performs a silent refresh for implicit flow.\n     * Use this method to get new tokens when/before\n     * the existing tokens expire.\n     */\n    public silentRefresh(params: object = {}, noPrompt = true): Promise<OAuthEvent> {\n        const claims: object = this.getIdentityClaims() || {};\n\n        if (this.useIdTokenHintForSilentRefresh && this.hasValidIdToken()) {\n            params['id_token_hint'] = this.getIdToken();\n        }\n\n        if (!this.validateUrlForHttps(this.loginUrl)) {\n            throw new Error(\n                'tokenEndpoint must use https, or config value for property requireHttps must allow http'\n            );\n        }\n\n        if (typeof document === 'undefined') {\n            throw new Error('silent refresh is not supported on this platform');\n        }\n\n        const existingIframe = document.getElementById(\n            this.silentRefreshIFrameName\n        );\n\n        if (existingIframe) {\n            document.body.removeChild(existingIframe);\n        }\n\n        this.silentRefreshSubject = claims['sub'];\n\n        const iframe = document.createElement('iframe');\n        iframe.id = this.silentRefreshIFrameName;\n\n        this.setupSilentRefreshEventListener();\n\n        const redirectUri = this.silentRefreshRedirectUri || this.redirectUri;\n        this.createLoginUrl(null, null, redirectUri, noPrompt, params).then(url => {\n            iframe.setAttribute('src', url);\n\n            if (!this.silentRefreshShowIFrame) {\n                iframe.style['display'] = 'none';\n            }\n            document.body.appendChild(iframe);\n        });\n\n        const errors = this.events.pipe(\n            filter(e => e instanceof OAuthErrorEvent),\n            first()\n        );\n        const success = this.events.pipe(\n            filter(e => e.type === 'silently_refreshed'),\n            first()\n        );\n        const timeout = of(\n            new OAuthErrorEvent('silent_refresh_timeout', null)\n        ).pipe(delay(this.silentRefreshTimeout));\n\n        return race([errors, success, timeout])\n            .pipe(\n                tap(e => {\n                    if (e.type === 'silent_refresh_timeout') {\n                        this.eventsSubject.next(e);\n                    }\n                }),\n                map(e => {\n                    if (e instanceof OAuthErrorEvent) {\n                        throw e;\n                    }\n                    return e;\n                })\n            )\n            .toPromise();\n    }\n\n    public initImplicitFlowInPopup(options?: { height?: number, width?: number }) {\n        options = options || {};\n        return this.createLoginUrl(null, null, this.silentRefreshRedirectUri, false, {\n            display: 'popup'\n        }).then(url => {\n            return new Promise((resolve, reject) => {\n                let windowRef = window.open(url, '_blank', this.calculatePopupFeatures(options));\n\n                const cleanup = () => {\n                    window.removeEventListener('message', listener);\n                    windowRef.close();\n                    windowRef = null;\n                };\n\n                const listener = (e: MessageEvent) => {\n                    const message = this.processMessageEventMessage(e);\n\n                    this.tryLogin({\n                        customHashFragment: message,\n                        preventClearHashAfterLogin: true,\n                    }).then(() => {\n                        cleanup();\n                        resolve();\n                    }, err => {\n                        cleanup();\n                        reject(err);\n                    });\n                };\n\n                window.addEventListener('message', listener);\n            });\n        });\n    }\n\n    protected calculatePopupFeatures(options: { height?: number, width?: number }) {\n        // Specify an static height and width and calculate centered position\n        const height = options.height || 470;\n        const width = options.width || 500;\n        const left = (screen.width / 2) - (width / 2);\n        const top = (screen.height / 2) - (height / 2);\n        return `location=no,toolbar=no,width=${width},height=${height},top=${top},left=${left}`;\n    }\n\n    protected processMessageEventMessage(e: MessageEvent) {\n        let expectedPrefix = '#';\n\n        if (this.silentRefreshMessagePrefix) {\n            expectedPrefix += this.silentRefreshMessagePrefix;\n        }\n\n        if (!e || !e.data || typeof e.data !== 'string') {\n            return;\n        }\n\n        const prefixedMessage: string = e.data;\n\n        if (!prefixedMessage.startsWith(expectedPrefix)) {\n            return;\n        }\n\n        return '#' + prefixedMessage.substr(expectedPrefix.length);\n    }\n\n    protected canPerformSessionCheck(): boolean {\n        if (!this.sessionChecksEnabled) {\n            return false;\n        }\n        if (!this.sessionCheckIFrameUrl) {\n            console.warn(\n                'sessionChecksEnabled is activated but there is no sessionCheckIFrameUrl'\n            );\n            return false;\n        }\n        const sessionState = this.getSessionState();\n        if (!sessionState) {\n            console.warn(\n                'sessionChecksEnabled is activated but there is no session_state'\n            );\n            return false;\n        }\n        if (typeof document === 'undefined') {\n            return false;\n        }\n\n        return true;\n    }\n\n    protected setupSessionCheckEventListener(): void {\n        this.removeSessionCheckEventListener();\n\n        this.sessionCheckEventListener = (e: MessageEvent) => {\n            const origin = e.origin.toLowerCase();\n            const issuer = this.issuer.toLowerCase();\n\n            this.debug('sessionCheckEventListener');\n\n            if (!issuer.startsWith(origin)) {\n                this.debug(\n                    'sessionCheckEventListener',\n                    'wrong origin',\n                    origin,\n                    'expected',\n                    issuer\n                );\n            }\n\n            // only run in Angular zone if it is 'changed' or 'error'\n            switch (e.data) {\n                case 'unchanged':\n                    this.handleSessionUnchanged();\n                    break;\n                case 'changed':\n                    this.ngZone.run(() => {\n                        this.handleSessionChange();\n                    });\n                    break;\n                case 'error':\n                    this.ngZone.run(() => {\n                        this.handleSessionError();\n                    });\n                    break;\n            }\n\n            this.debug('got info from session check inframe', e);\n        };\n\n        // prevent Angular from refreshing the view on every message (runs in intervals)\n        this.ngZone.runOutsideAngular(() => {\n            window.addEventListener('message', this.sessionCheckEventListener);\n        });\n    }\n\n    protected handleSessionUnchanged(): void {\n        this.debug('session check', 'session unchanged');\n    }\n\n    protected handleSessionChange(): void {\n        /* events: session_changed, relogin, stopTimer, logged_out*/\n        this.eventsSubject.next(new OAuthInfoEvent('session_changed'));\n        this.stopSessionCheckTimer();\n        if (this.silentRefreshRedirectUri) {\n            this.silentRefresh().catch(_ =>\n                this.debug('silent refresh failed after session changed')\n            );\n            this.waitForSilentRefreshAfterSessionChange();\n        } else {\n            this.eventsSubject.next(new OAuthInfoEvent('session_terminated'));\n            this.logOut(true);\n        }\n    }\n\n    protected waitForSilentRefreshAfterSessionChange() {\n        this.events\n            .pipe(\n                filter(\n                    (e: OAuthEvent) =>\n                        e.type === 'silently_refreshed' ||\n                        e.type === 'silent_refresh_timeout' ||\n                        e.type === 'silent_refresh_error'\n                ),\n                first()\n            )\n            .subscribe(e => {\n                if (e.type !== 'silently_refreshed') {\n                    this.debug('silent refresh did not work after session changed');\n                    this.eventsSubject.next(new OAuthInfoEvent('session_terminated'));\n                    this.logOut(true);\n                }\n            });\n    }\n\n    protected handleSessionError(): void {\n        this.stopSessionCheckTimer();\n        this.eventsSubject.next(new OAuthInfoEvent('session_error'));\n    }\n\n    protected removeSessionCheckEventListener(): void {\n        if (this.sessionCheckEventListener) {\n            window.removeEventListener('message', this.sessionCheckEventListener);\n            this.sessionCheckEventListener = null;\n        }\n    }\n\n    protected initSessionCheck(): void {\n        if (!this.canPerformSessionCheck()) {\n            return;\n        }\n\n        const existingIframe = document.getElementById(this.sessionCheckIFrameName);\n        if (existingIframe) {\n            document.body.removeChild(existingIframe);\n        }\n\n        const iframe = document.createElement('iframe');\n        iframe.id = this.sessionCheckIFrameName;\n\n        this.setupSessionCheckEventListener();\n\n        const url = this.sessionCheckIFrameUrl;\n        iframe.setAttribute('src', url);\n        iframe.style.display = 'none';\n        document.body.appendChild(iframe);\n\n        this.startSessionCheckTimer();\n    }\n\n    protected startSessionCheckTimer(): void {\n        this.stopSessionCheckTimer();\n        this.ngZone.runOutsideAngular(() => {\n            this.sessionCheckTimer = setInterval(\n                this.checkSession.bind(this),\n                this.sessionCheckIntervall\n            );\n        });\n    }\n\n    protected stopSessionCheckTimer(): void {\n        if (this.sessionCheckTimer) {\n            clearInterval(this.sessionCheckTimer);\n            this.sessionCheckTimer = null;\n        }\n    }\n\n    protected checkSession(): void {\n        const iframe: any = document.getElementById(this.sessionCheckIFrameName);\n\n        if (!iframe) {\n            this.logger.warn(\n                'checkSession did not find iframe',\n                this.sessionCheckIFrameName\n            );\n        }\n\n        const sessionState = this.getSessionState();\n\n        if (!sessionState) {\n            this.stopSessionCheckTimer();\n        }\n\n        const message = this.clientId + ' ' + sessionState;\n        iframe.contentWindow.postMessage(message, this.issuer);\n    }\n\n    protected async createLoginUrl(\n        state = '',\n        loginHint = '',\n        customRedirectUri = '',\n        noPrompt = false,\n        params: object = {}\n    ) {\n        const that = this;\n\n        let redirectUri: string;\n\n        if (customRedirectUri) {\n            redirectUri = customRedirectUri;\n        } else {\n            redirectUri = this.redirectUri;\n        }\n\n        const nonce = await this.createAndSaveNonce();\n\n        if (state) {\n            state = nonce + this.config.nonceStateSeparator + state;\n        } else {\n            state = nonce;\n        }\n\n        if (!this.requestAccessToken && !this.oidc) {\n            throw new Error(\n                'Either requestAccessToken or oidc or both must be true'\n            );\n        }\n\n        if (this.config.responseType) {\n            this.responseType = this.config.responseType;\n        } else {\n            if (this.oidc && this.requestAccessToken) {\n                this.responseType = 'id_token token';\n            } else if (this.oidc && !this.requestAccessToken) {\n                this.responseType = 'id_token';\n            } else {\n                this.responseType = 'token';\n            }\n        }\n\n        const seperationChar = that.loginUrl.indexOf('?') > -1 ? '&' : '?';\n\n        let scope = that.scope;\n\n        if (this.oidc && !scope.match(/(^|\\s)openid($|\\s)/)) {\n            scope = 'openid ' + scope;\n        }\n\n        let url =\n            that.loginUrl +\n            seperationChar +\n            'response_type=' +\n            encodeURIComponent(that.responseType) +\n            '&client_id=' +\n            encodeURIComponent(that.clientId) +\n            '&state=' +\n            encodeURIComponent(state) +\n            '&redirect_uri=' +\n            encodeURIComponent(redirectUri) +\n            '&scope=' +\n            encodeURIComponent(scope);\n\n        if (this.responseType === 'code' && !this.disablePKCE) {\n            const [challenge, verifier] = await this.createChallangeVerifierPairForPKCE();\n            this._storage.setItem('PKCI_verifier', verifier);\n            url += '&code_challenge=' + challenge;\n            url += '&code_challenge_method=S256';\n        }\n\n        if (loginHint) {\n            url += '&login_hint=' + encodeURIComponent(loginHint);\n        }\n\n        if (that.resource) {\n            url += '&resource=' + encodeURIComponent(that.resource);\n        }\n\n        if (that.oidc) {\n            url += '&nonce=' + encodeURIComponent(nonce);\n        }\n\n        if (noPrompt) {\n            url += '&prompt=none';\n        }\n\n        for (const key of Object.keys(params)) {\n            url +=\n                '&' + encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n        }\n\n        if (this.customQueryParams) {\n            for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\n                url +=\n                    '&' + key + '=' + encodeURIComponent(this.customQueryParams[key]);\n            }\n        }\n\n        return url;\n        \n    }\n\n    initImplicitFlowInternal(\n        additionalState = '',\n        params: string | object = ''\n    ): void {\n        if (this.inImplicitFlow) {\n            return;\n        }\n\n        this.inImplicitFlow = true;\n\n        if (!this.validateUrlForHttps(this.loginUrl)) {\n            throw new Error(\n                'loginUrl must use https, or config value for property requireHttps must allow http'\n            );\n        }\n\n        let addParams: object = {};\n        let loginHint: string = null;\n\n        if (typeof params === 'string') {\n            loginHint = params;\n        } else if (typeof params === 'object') {\n            addParams = params;\n        }\n\n        this.createLoginUrl(additionalState, loginHint, null, false, addParams)\n            .then(this.config.openUri)\n            .catch(error => {\n                console.error('Error in initImplicitFlow', error);\n                this.inImplicitFlow = false;\n            });\n    }\n\n    /**\n     * Starts the implicit flow and redirects to user to\n     * the auth servers' login url.\n     *\n     * @param additionalState Optional state that is passed around.\n     *  You'll find this state in the property `state` after `tryLogin` logged in the user.\n     * @param params Hash with additional parameter. If it is a string, it is used for the\n     *               parameter loginHint (for the sake of compatibility with former versions)\n     */\n    public initImplicitFlow(\n        additionalState = '',\n        params: string | object = ''\n    ): void {\n        if (this.loginUrl !== '') {\n            this.initImplicitFlowInternal(additionalState, params);\n        } else {\n            this.events\n                .pipe(filter(e => e.type === 'discovery_document_loaded'))\n                .subscribe(_ => this.initImplicitFlowInternal(additionalState, params));\n        }\n    }\n\n    /**\n     * Reset current implicit flow\n     *\n     * @description This method allows resetting the current implict flow in order to be initialized again.\n     */\n    public resetImplicitFlow(): void {\n      this.inImplicitFlow = false;\n    }\n\n    protected callOnTokenReceivedIfExists(options: LoginOptions): void {\n        const that = this;\n        if (options.onTokenReceived) {\n            const tokenParams = {\n                idClaims: that.getIdentityClaims(),\n                idToken: that.getIdToken(),\n                accessToken: that.getAccessToken(),\n                state: that.state\n            };\n            options.onTokenReceived(tokenParams);\n        }\n    }\n\n    protected storeAccessTokenResponse(\n        accessToken: string,\n        refreshToken: string,\n        expiresIn: number,\n        grantedScopes: String\n    ): void {\n        this._storage.setItem('access_token', accessToken);\n        if (grantedScopes) {\n            this._storage.setItem('granted_scopes', JSON.stringify(grantedScopes.split('+')));\n        }\n        this._storage.setItem('access_token_stored_at', '' + Date.now());\n        if (expiresIn) {\n            const expiresInMilliSeconds = expiresIn * 1000;\n            const now = new Date();\n            const expiresAt = now.getTime() + expiresInMilliSeconds;\n            this._storage.setItem('expires_at', '' + expiresAt);\n        }\n\n        if (refreshToken) {\n            this._storage.setItem('refresh_token', refreshToken);\n        }\n    }\n\n    /**\n     * Store additional parameters received in the tokenResponse\n     * @param tokenResponse the parameters from the token post request\n     */\n    protected storeAdditionalParameters(tokenResponse) {\n        const additionalParams = JSON.parse(this._storage.getItem('additional_params')) || {};\n  \n        const tokenKeys: Array<string> = ['access_token', 'refresh_token', 'expires_in', 'scope'];\n        \n        Object.keys(tokenResponse).forEach((key: string) => {\n          if (!tokenKeys.includes(key)) { // don't store parameters related to token, stored elsewhere\n            additionalParams[key] = tokenResponse[key];\n          }\n        });\n  \n        this._storage.setItem('additional_params', JSON.stringify(additionalParams));\n    }\n\n    /**\n     * Delegates to tryLoginImplicitFlow for the sake of competability\n     * @param options Optional options.\n     */\n    public tryLogin(options: LoginOptions = null): Promise<boolean> {\n        if (this.config.responseType === 'code') {\n            return this.tryLoginCodeFlow().then(_ => true);\n        }\n        else {\n            return this.tryLoginImplicitFlow(options);\n        }\n    }\n\n\n    private parseQueryString(queryString: string): object {\n        if (!queryString || queryString.length === 0) {\n            return {};\n        }\n\n        if (queryString.charAt(0) === '?') {\n            queryString = queryString.substr(1);\n        }\n\n        return this.urlHelper.parseQueryString(queryString);\n\n\n    }\n\n    public tryLoginCodeFlow(): Promise<void> {\n\n        const parts = this.parseQueryString(window.location.search)\n\n        const code = parts['code'];\n        const state = parts['state'];\n\n        const href = location.href\n                        .replace(/[&\\?]code=[^&\\$]*/, '')\n                        .replace(/[&\\?]scope=[^&\\$]*/, '')\n                        .replace(/[&\\?]state=[^&\\$]*/, '')\n                        .replace(/[&\\?]session_state=[^&\\$]*/, '');\n\n        history.replaceState(null, window.name, href);\n\n        let [nonceInState, userState] = this.parseState(state);\n        this.state = userState;\n\n        if (parts['error']) {\n            this.debug('error trying to login');\n            this.handleLoginError({}, parts);\n            const err = new OAuthErrorEvent('code_error', {}, parts);\n            this.eventsSubject.next(err);\n            return Promise.reject(err);\n        }\n\n        if (!nonceInState) {\n            return Promise.resolve();\n        }\n\n        const success = this.validateNonce(nonceInState);\n        if (!success) {\n            const event = new OAuthErrorEvent('invalid_nonce_in_state', null);\n            this.eventsSubject.next(event);\n            return Promise.reject(event);\n        }\n\n        if (code) {\n            return new Promise((resolve, reject) => {\n                this.getTokenFromCode(code).then(result => {\n                    resolve();\n                }).catch(err => {\n                    reject(err);\n                });\n            });\n        } else {\n            return Promise.resolve();\n        }\n    }\n\n    /**\n     * Get token using an intermediate code. Works for the Authorization Code flow.\n     */\n    private getTokenFromCode(code: string): Promise<object> {\n        let params = new HttpParams()\n            .set('grant_type', 'authorization_code')\n            .set('code', code)\n            .set('redirect_uri', this.redirectUri);\n\n        if (!this.disablePKCE) {\n            const pkciVerifier = this._storage.getItem('PKCI_verifier');\n\n            if (!pkciVerifier) {\n                console.warn('No PKCI verifier found in oauth storage!');\n            } else {\n                params = params.set('code_verifier', pkciVerifier);\n            }\n        }\n\n        return this.fetchAndProcessToken(params);\n    }\n\n    private fetchAndProcessToken(params: HttpParams): Promise<object> {\n\n        let headers = new HttpHeaders()\n                                .set('Content-Type', 'application/x-www-form-urlencoded');\n\n        if (!this.validateUrlForHttps(this.tokenEndpoint)) {\n            throw new Error('tokenEndpoint must use Http. Also check property requireHttps.');\n        }\n\n        if (this.useHttpBasicAuth) {\n            const header = btoa(`${this.clientId}:${this.dummyClientSecret}`);\n            headers = headers.set(\n                'Authorization',\n                'Basic ' + header);\n        }\n\n        if (!this.useHttpBasicAuth) {\n            params = params.set('client_id', this.clientId);\n        }\n\n        if (!this.useHttpBasicAuth && this.dummyClientSecret) {\n            params = params.set('client_secret', this.dummyClientSecret);\n        }\n\n        return new Promise((resolve, reject) => {\n\n            if (this.customQueryParams) {\n                for (let key of Object.getOwnPropertyNames(this.customQueryParams)) {\n                    params = params.set(key, this.customQueryParams[key]);\n                }\n            }\n\n            this.http.post<TokenResponse>(this.tokenEndpoint, params, { headers }).subscribe(\n                (tokenResponse) => {\n                    this.debug('refresh tokenResponse', tokenResponse);\n                    this.storeAccessTokenResponse(\n                        tokenResponse.access_token, \n                        tokenResponse.refresh_token, \n                        tokenResponse.expires_in,\n                        tokenResponse.scope);\n\n                    this.storeAdditionalParameters(tokenResponse);\n\n                    if (this.oidc && tokenResponse.id_token) {\n                        this.processIdToken(tokenResponse.id_token, tokenResponse.access_token).  \n                        then(result => {\n                            this.storeIdToken(result);\n            \n                            this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\n                            this.eventsSubject.next(new OAuthSuccessEvent('token_refreshed'));\n            \n                            resolve(tokenResponse);\n                        })\n                        .catch(reason => {\n                            this.eventsSubject.next(new OAuthErrorEvent('token_validation_error', reason));\n                            console.error('Error validating tokens');\n                            console.error(reason);\n            \n                            reject(reason);\n                        });\n                    } else {\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_refreshed'));\n            \n                        resolve(tokenResponse);\n                    }\n                },\n                (err) => {\n                    console.error('Error getting token', err);\n                    this.eventsSubject.next(new OAuthErrorEvent('token_refresh_error', err));\n                    reject(err);\n                }\n            );\n        });\n    }\n\n    /**\n     * Checks whether there are tokens in the hash fragment\n     * as a result of the implicit flow. These tokens are\n     * parsed, validated and used to sign the user in to the\n     * current client.\n     *\n     * @param options Optional options.\n     */\n    public tryLoginImplicitFlow(options: LoginOptions = null): Promise<boolean> {\n        options = options || {};\n\n        let parts: object;\n\n        if (options.customHashFragment) {\n            parts = this.urlHelper.getHashFragmentParams(options.customHashFragment);\n        } else {\n            parts = this.urlHelper.getHashFragmentParams();\n        }\n\n        this.debug('parsed url', parts);\n\n        const state = parts['state'];\n\n        let [nonceInState, userState] = this.parseState(state);\n        this.state = userState;\n\n        if (parts['error']) {\n            this.debug('error trying to login');\n            this.handleLoginError(options, parts);\n            const err = new OAuthErrorEvent('token_error', {}, parts);\n            this.eventsSubject.next(err);\n            return Promise.reject(err);\n        }\n\n        const accessToken = parts['access_token'];\n        const idToken = parts['id_token'];\n        const sessionState = parts['session_state'];\n        const grantedScopes = parts['scope'];\n\n        if (!this.requestAccessToken && !this.oidc) {\n            return Promise.reject(\n                'Either requestAccessToken or oidc (or both) must be true.'\n            );\n        }\n\n        if (this.requestAccessToken && !accessToken) {\n            return Promise.resolve(false);\n        }\n        if (this.requestAccessToken && !options.disableOAuth2StateCheck && !state) {\n            return Promise.resolve(false);\n        }\n        if (this.oidc && !idToken) {\n            return Promise.resolve(false);\n        }\n\n        if (this.sessionChecksEnabled && !sessionState) {\n            this.logger.warn(\n                'session checks (Session Status Change Notification) ' +\n                'were activated in the configuration but the id_token ' +\n                'does not contain a session_state claim'\n            );\n        }\n\n        if (this.requestAccessToken && !options.disableOAuth2StateCheck) {\n            const success = this.validateNonce(nonceInState);\n\n            if (!success) {\n                const event = new OAuthErrorEvent('invalid_nonce_in_state', null);\n                this.eventsSubject.next(event);\n                return Promise.reject(event);\n            }\n        }\n\n        if (this.requestAccessToken) {\n            this.storeAccessTokenResponse(\n                accessToken,\n                null,\n                parts['expires_in'] || this.fallbackAccessTokenExpirationTimeInSec,\n                grantedScopes\n            );\n        }\n\n        if (!this.oidc) {\n            this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\n            if (this.clearHashAfterLogin && !options.preventClearHashAfterLogin) {\n                location.hash = '';\n            }\n\n            this.callOnTokenReceivedIfExists(options);\n            return Promise.resolve(true);\n\n        }\n\n        return this.processIdToken(idToken, accessToken)\n            .then(result => {\n                if (options.validationHandler) {\n                    return options\n                        .validationHandler({\n                            accessToken: accessToken,\n                            idClaims: result.idTokenClaims,\n                            idToken: result.idToken,\n                            state: state\n                        })\n                        .then(_ => result);\n                }\n                return result;\n            })\n            .then(result => {\n                this.storeIdToken(result);\n                this.storeSessionState(sessionState);\n                if (this.clearHashAfterLogin) {\n                    location.hash = '';\n                }\n                this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\n                this.callOnTokenReceivedIfExists(options);\n                this.inImplicitFlow = false;\n                return true;\n            })\n            .catch(reason => {\n                this.eventsSubject.next(\n                    new OAuthErrorEvent('token_validation_error', reason)\n                );\n                this.logger.error('Error validating tokens');\n                this.logger.error(reason);\n                return Promise.reject(reason);\n            });\n    }\n\n    private parseState(state: string): [string, string] {\n        let nonce = state;\n        let userState = '';\n\n        if (state) {\n            const idx = state.indexOf(this.config.nonceStateSeparator);\n            if (idx > -1) {\n                nonce = state.substr(0, idx);\n                userState = state.substr(idx + this.config.nonceStateSeparator.length);\n            }\n        }\n        return [nonce, userState];\n    }\n\n    protected validateNonce(\n        nonceInState: string\n    ): boolean {\n        const savedNonce = this._storage.getItem('nonce');\n        if (savedNonce !== nonceInState) {\n            \n            const err = 'Validating access_token failed, wrong state/nonce.';\n            console.error(err, savedNonce, nonceInState);\n            return false;\n        }\n        return true;\n    }\n\n    protected storeIdToken(idToken: ParsedIdToken) {\n        this._storage.setItem('id_token', idToken.idToken);\n        this._storage.setItem('id_token_claims_obj', idToken.idTokenClaimsJson);\n        this._storage.setItem('id_token_expires_at', '' + idToken.idTokenExpiresAt);\n        this._storage.setItem('id_token_stored_at', '' + Date.now());\n    }\n\n    protected storeSessionState(sessionState: string): void {\n        this._storage.setItem('session_state', sessionState);\n    }\n\n    protected getSessionState(): string {\n        return this._storage.getItem('session_state');\n    }\n\n    protected handleLoginError(options: LoginOptions, parts: object): void {\n        if (options.onLoginError) {\n            options.onLoginError(parts);\n        }\n        if (this.clearHashAfterLogin) {\n            location.hash = '';\n        }\n    }\n\n    /**\n     * @ignore\n     */\n    public processIdToken(\n        idToken: string,\n        accessToken: string,\n        skipNonceCheck = false\n    ): Promise<ParsedIdToken> {\n        const tokenParts = idToken.split('.');\n        const headerBase64 = this.padBase64(tokenParts[0]);\n        const headerJson = b64DecodeUnicode(headerBase64);\n        const header = JSON.parse(headerJson);\n        const claimsBase64 = this.padBase64(tokenParts[1]);\n        const claimsJson = b64DecodeUnicode(claimsBase64);\n        const claims = JSON.parse(claimsJson);\n        const savedNonce = this._storage.getItem('nonce');\n\n        if (Array.isArray(claims.aud)) {\n            if (claims.aud.every(v => v !== this.clientId)) {\n                const err = 'Wrong audience: ' + claims.aud.join(',');\n                this.logger.warn(err);\n                return Promise.reject(err);\n            }\n        } else {\n            if (claims.aud !== this.clientId) {\n                const err = 'Wrong audience: ' + claims.aud;\n                this.logger.warn(err);\n                return Promise.reject(err);\n            }\n        }\n\n        if (!claims.sub) {\n            const err = 'No sub claim in id_token';\n            this.logger.warn(err);\n            return Promise.reject(err);\n        }\n\n        /* For now, we only check whether the sub against\n         * silentRefreshSubject when sessionChecksEnabled is on\n         * We will reconsider in a later version to do this\n         * in every other case too.\n         */\n        if (\n            this.sessionChecksEnabled &&\n            this.silentRefreshSubject &&\n            this.silentRefreshSubject !== claims['sub']\n        ) {\n            const err =\n                'After refreshing, we got an id_token for another user (sub). ' +\n                `Expected sub: ${this.silentRefreshSubject}, received sub: ${\n                claims['sub']\n                }`;\n\n            this.logger.warn(err);\n            return Promise.reject(err);\n        }\n\n        if (!claims.iat) {\n            const err = 'No iat claim in id_token';\n            this.logger.warn(err);\n            return Promise.reject(err);\n        }\n\n        if (!this.skipIssuerCheck && claims.iss !== this.issuer) {\n            const err = 'Wrong issuer: ' + claims.iss;\n            this.logger.warn(err);\n            return Promise.reject(err);\n        }\n\n        if (!skipNonceCheck && claims.nonce !== savedNonce) {\n            const err = 'Wrong nonce: ' + claims.nonce;\n            this.logger.warn(err);\n            return Promise.reject(err);\n        }\n\n        if (\n            !this.disableAtHashCheck &&\n            this.requestAccessToken &&\n            !claims['at_hash']\n        ) {\n            const err = 'An at_hash is needed!';\n            this.logger.warn(err);\n            return Promise.reject(err);\n        }\n\n        const now = Date.now();\n        const issuedAtMSec = claims.iat * 1000;\n        const expiresAtMSec = claims.exp * 1000;\n        const clockSkewInMSec = (this.clockSkewInSec || 600) * 1000;\n\n        if (\n            issuedAtMSec - clockSkewInMSec >= now ||\n            expiresAtMSec + clockSkewInMSec <= now\n        ) {\n            const err = 'Token has expired';\n            console.error(err);\n            console.error({\n                now: now,\n                issuedAtMSec: issuedAtMSec,\n                expiresAtMSec: expiresAtMSec\n            });\n            return Promise.reject(err);\n        }\n\n        const validationParams: ValidationParams = {\n            accessToken: accessToken,\n            idToken: idToken,\n            jwks: this.jwks,\n            idTokenClaims: claims,\n            idTokenHeader: header,\n            loadKeys: () => this.loadJwks()\n        };\n\n\n        return this.checkAtHash(validationParams)\n          .then(atHashValid => {\n            if (\n              !this.disableAtHashCheck &&\n              this.requestAccessToken &&\n              !atHashValid\n          ) {\n              const err = 'Wrong at_hash';\n              this.logger.warn(err);\n              return Promise.reject(err);\n          }\n\n          return this.checkSignature(validationParams).then(_ => {\n              const result: ParsedIdToken = {\n                  idToken: idToken,\n                  idTokenClaims: claims,\n                  idTokenClaimsJson: claimsJson,\n                  idTokenHeader: header,\n                  idTokenHeaderJson: headerJson,\n                  idTokenExpiresAt: expiresAtMSec\n              };\n              return result;\n          });\n\n        });\n    }\n\n    /**\n     * Returns the received claims about the user.\n     */\n    public getIdentityClaims(): object {\n        const claims = this._storage.getItem('id_token_claims_obj');\n        if (!claims) {\n            return null;\n        }\n        return JSON.parse(claims);\n    }\n\n    /**\n     * Returns the granted scopes from the server.\n     */\n    public getGrantedScopes(): object {\n        const scopes = this._storage.getItem('granted_scopes');\n        if (!scopes) {\n            return null;\n        }\n        return JSON.parse(scopes);\n    }\n\n    /**\n     * Returns the current id_token.\n     */\n    public getIdToken(): string {\n        return this._storage\n            ? this._storage.getItem('id_token')\n            : null;\n    }\n\n    protected padBase64(base64data): string {\n        while (base64data.length % 4 !== 0) {\n            base64data += '=';\n        }\n        return base64data;\n    }\n\n    /**\n     * Returns the current access_token.\n     */\n    public getAccessToken(): string {\n        return this._storage\n            ? this._storage.getItem('access_token')\n            : null;\n    }\n\n    public getRefreshToken(): string {\n        return this._storage\n            ? this._storage.getItem('refresh_token')\n            : null;\n    }\n\n    /**\n     * Returns the expiration date of the access_token\n     * as milliseconds since 1970.\n     */\n    public getAccessTokenExpiration(): number {\n        if (!this._storage.getItem('expires_at')) {\n            return null;\n        }\n        return parseInt(this._storage.getItem('expires_at'), 10);\n    }\n\n    protected getAccessTokenStoredAt(): number {\n        return parseInt(this._storage.getItem('access_token_stored_at'), 10);\n    }\n\n    protected getIdTokenStoredAt(): number {\n        return parseInt(this._storage.getItem('id_token_stored_at'), 10);\n    }\n\n    /**\n     * Returns the expiration date of the id_token\n     * as milliseconds since 1970.\n     */\n    public getIdTokenExpiration(): number {\n        if (!this._storage.getItem('id_token_expires_at')) {\n            return null;\n        }\n\n        return parseInt(this._storage.getItem('id_token_expires_at'), 10);\n    }\n\n    /**\n     * Get additional parameters that have been saved after a log in\n     * @returns key:value pairs of additional parameters from oAuth login\n     */\n    public getAdditionalParameters(): object {\n        if (!this._storage.getItem('additional_params')) {\n          return null;\n        }\n        return JSON.parse(this._storage.getItem('additional_params'));\n    }\n\n    /**\n     * Checkes, whether there is a valid access_token.\n     */\n    public hasValidAccessToken(): boolean {\n        if (this.getAccessToken()) {\n            const expiresAt = this._storage.getItem('expires_at');\n            const now = new Date();\n            if (expiresAt && parseInt(expiresAt, 10) < now.getTime()) {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether there is a valid id_token.\n     */\n    public hasValidIdToken(): boolean {\n        if (this.getIdToken()) {\n            const expiresAt = this._storage.getItem('id_token_expires_at');\n            const now = new Date();\n            if (expiresAt && parseInt(expiresAt, 10) < now.getTime()) {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns the auth-header that can be used\n     * to transmit the access_token to a service\n     */\n    public authorizationHeader(): string {\n        return 'Bearer ' + this.getAccessToken();\n    }\n\n    /**\n     * Removes all tokens and logs the user out.\n     * If a logout url is configured, the user is\n     * redirected to it.\n     * @param noRedirectToLogoutUrl\n     */\n    public logOut(noRedirectToLogoutUrl = false): void {\n        const id_token = this.getIdToken();\n        this._storage.removeItem('access_token');\n        this._storage.removeItem('id_token');\n        this._storage.removeItem('refresh_token');\n        this._storage.removeItem('nonce');\n        this._storage.removeItem('expires_at');\n        this._storage.removeItem('id_token_claims_obj');\n        this._storage.removeItem('id_token_expires_at');\n        this._storage.removeItem('id_token_stored_at');\n        this._storage.removeItem('access_token_stored_at');\n        this._storage.removeItem('granted_scopes');\n        this._storage.removeItem('session_state');\n\n        this.silentRefreshSubject = null;\n\n        this.eventsSubject.next(new OAuthInfoEvent('logout'));\n\n        if (!this.logoutUrl) {\n            return;\n        }\n        if (noRedirectToLogoutUrl) {\n            return;\n        }\n\n        if (!id_token && !this.postLogoutRedirectUri) {\n            return;\n        }\n\n        let logoutUrl: string;\n\n        if (!this.validateUrlForHttps(this.logoutUrl)) {\n            throw new Error(\n                'logoutUrl must use https, or config value for property requireHttps must allow http'\n            );\n        }\n\n        // For backward compatibility\n        if (this.logoutUrl.indexOf('{{') > -1) {\n            logoutUrl = this.logoutUrl\n                .replace(/\\{\\{id_token\\}\\}/, id_token)\n                .replace(/\\{\\{client_id\\}\\}/, this.clientId);\n        } else {\n\n            let params = new HttpParams();\n\n            if (id_token) {\n                params = params.set('id_token_hint', id_token);\n            }\n\n            const postLogoutUrl = this.postLogoutRedirectUri || this.redirectUri;\n            if (postLogoutUrl) {\n                params = params.set('post_logout_redirect_uri', postLogoutUrl);\n            }\n\n            logoutUrl =\n                this.logoutUrl +\n                (this.logoutUrl.indexOf('?') > -1 ? '&' : '?') +\n                params.toString();\n        }\n        this.config.openUri(logoutUrl);\n    }\n\n    /**\n     * @ignore\n     */\n    public createAndSaveNonce(): Promise<string> {\n        const that = this;\n        return this.createNonce().then(function (nonce: any) {\n            that._storage.setItem('nonce', nonce);\n            return nonce;\n        });\n    }\n\n    /**\n     * @ignore\n     */\n    public ngOnDestroy() {\n        this.clearAccessTokenTimer();\n        this.clearIdTokenTimer();\n    }\n\n    protected createNonce(): Promise<string> {\n        return new Promise((resolve) => {\n            if (this.rngUrl) {\n                throw new Error(\n                    'createNonce with rng-web-api has not been implemented so far'\n                );\n            }\n\n            /*\n             * This alphabet uses a-z A-Z 0-9 _- symbols.\n             * Symbols order was changed for better gzip compression.\n             */\n            const url = 'Uint8ArdomValuesObj012345679BCDEFGHIJKLMNPQRSTWXYZ_cfghkpqvwxyz-';\n            let size = 45;\n            let id = '';\n\n            const crypto = self.crypto || self['msCrypto'];\n            if (crypto) {\n                const bytes = crypto.getRandomValues(new Uint8Array(size));\n                while (0 < size--) {\n                    id += url[bytes[size] & 63];\n                }\n            } else {\n                while (0 < size--) {\n                    id += url[Math.random() * 64 | 0];\n                }\n            }\n\n            resolve(id);\n        });\n    }\n\n    protected async checkAtHash(params: ValidationParams): Promise<boolean> {\n        if (!this.tokenValidationHandler) {\n            this.logger.warn(\n                'No tokenValidationHandler configured. Cannot check at_hash.'\n            );\n            return true;\n        }\n        return this.tokenValidationHandler.validateAtHash(params);\n    }\n\n    protected checkSignature(params: ValidationParams): Promise<any> {\n        if (!this.tokenValidationHandler) {\n            this.logger.warn(\n                'No tokenValidationHandler configured. Cannot check signature.'\n            );\n            return Promise.resolve(null);\n        }\n        return this.tokenValidationHandler.validateSignature(params);\n    }\n\n\n    /**\n     * Start the implicit flow or the code flow,\n     * depending on your configuration.\n     */\n    public initLoginFlow(\n        additionalState = '',\n        params = {}\n    ) {\n        if (this.responseType === 'code') {\n            return this.initCodeFlow(additionalState, params);\n        } else {\n            return this.initImplicitFlow(additionalState, params);\n        }\n    }\n\n    /**\n     * Starts the authorization code flow and redirects to user to\n     * the auth servers login url.\n     */\n    public initCodeFlow(\n        additionalState = '',\n        params = {}\n    ): void {\n        if (this.loginUrl !== '') {\n            this.initCodeFlowInternal(additionalState, params);\n        } else {\n            this.events.pipe(filter(e => e.type === 'discovery_document_loaded'))\n            .subscribe(_ => this.initCodeFlowInternal(additionalState, params));\n        }\n    }\n\n    private initCodeFlowInternal(\n        additionalState = '',\n        params = {}\n    ): void {\n\n        if (!this.validateUrlForHttps(this.loginUrl)) {\n            throw new Error('loginUrl must use Http. Also check property requireHttps.');\n        }\n\n        this.createLoginUrl(additionalState, '', null, false, params).then(function (url) {\n            location.href = url;\n        })\n        .catch(error => {\n            console.error('Error in initAuthorizationCodeFlow');\n            console.error(error);\n        });\n    }\n\n    protected async createChallangeVerifierPairForPKCE(): Promise<[string, string]> {\n\n        if (!this.crypto) {\n            throw new Error('PKCI support for code flow needs a CryptoHander. Did you import the OAuthModule using forRoot() ?');\n        }\n\n\n        const verifier = await this.createNonce();\n        const challengeRaw = await this.crypto.calcHash(verifier, 'sha-256');\n        const challange = base64UrlEncode(challengeRaw);\n\n        return [challange, verifier];\n    }\n}\n","export abstract class OAuthModuleConfig {\n  resourceServer: OAuthResourceServerConfig;\n}\n\nexport abstract class OAuthResourceServerConfig {\n  /**\n   * Urls for which calls should be intercepted.\n   * If there is an ResourceServerErrorHandler registered, it is used for them.\n   * If sendAccessToken is set to true, the access_token is send to them too.\n   */\n  allowedUrls?: Array<string>;\n  sendAccessToken: boolean;\n  customUrlValidation?: (url: string) => boolean;\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\n\nexport abstract class OAuthResourceServerErrorHandler {\n  abstract handleError(err: HttpResponse<any>): Observable<any>;\n}\n\nexport class OAuthNoopResourceServerErrorHandler\n  implements OAuthResourceServerErrorHandler {\n  handleError(err: HttpResponse<any>): Observable<any> {\n    return throwError(err);\n  }\n}\n","import { Injectable, Optional } from '@angular/core';\n\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Observable, of, merge } from 'rxjs';\nimport { catchError, filter, map, take, mergeMap, timeout } from 'rxjs/operators';\nimport { OAuthResourceServerErrorHandler } from './resource-server-error-handler';\nimport { OAuthModuleConfig } from '../oauth-module.config';\nimport { OAuthStorage } from '../types';\nimport { OAuthService } from '../oauth-service';\n\nconst WAIT_FOR_TOKEN_RECEIVED = 1000;\n\n@Injectable()\nexport class DefaultOAuthInterceptor implements HttpInterceptor {\n\n    constructor(\n        private authStorage: OAuthStorage,\n        private oAuthService: OAuthService,\n        private errorHandler: OAuthResourceServerErrorHandler,\n        @Optional() private moduleConfig: OAuthModuleConfig\n    ) { }\n\n    private checkUrl(url: string): boolean {\n        if (this.moduleConfig.resourceServer.customUrlValidation) {\n            return this.moduleConfig.resourceServer.customUrlValidation(url);\n        }\n\n        if (this.moduleConfig.resourceServer.allowedUrls) {\n            return !!this.moduleConfig.resourceServer.allowedUrls.find(u => url.startsWith(u));\n        }\n\n        return true;\n    }\n\n  public intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const url = req.url.toLowerCase();\n\n\n    if (!this.moduleConfig) {\n      return next.handle(req);\n    }\n    if (!this.moduleConfig.resourceServer) {\n      return next.handle(req);\n    }\n    if (this.moduleConfig.resourceServer.allowedUrls && !this.checkUrl(url)) {\n      return next.handle(req);\n    }\n\n    const sendAccessToken = this.moduleConfig.resourceServer.sendAccessToken;\n\n    if (!sendAccessToken) {\n      return next\n        .handle(req)\n        .pipe(catchError(err => this.errorHandler.handleError(err)));\n    }\n\n    return merge(\n      of(this.oAuthService.getAccessToken()).pipe(\n        filter(token => token ? true : false),\n      ),\n      this.oAuthService.events.pipe(\n        filter(e => e.type === 'token_received'),\n        timeout(WAIT_FOR_TOKEN_RECEIVED),\n        map(_ => this.oAuthService.getAccessToken()),\n      ),\n    ).pipe(\n      take(1),\n      mergeMap(token => {\n        if (token) {\n          const header = 'Bearer ' + token;\n          const headers = req.headers.set('Authorization', header);\n          req = req.clone({ headers });\n        }\n\n        return next\n          .handle(req)\n          .pipe(catchError(err => this.errorHandler.handleError(err)));\n      }),\n    );\n  }\n}\n","import { ValidationHandler, ValidationParams } from './validation-handler';\n\n/**\n * A validation handler that isn't validating nothing.\n * Can be used to skip validation (at your own risk).\n */\nexport class NullValidationHandler implements ValidationHandler {\n  validateSignature(validationParams: ValidationParams): Promise<any> {\n    return Promise.resolve(null);\n  }\n  validateAtHash(validationParams: ValidationParams): Promise<boolean> {\n    return Promise.resolve(true);\n  }\n}\n","export function createDefaultLogger() {\n    return console;\n}\n\nexport function createDefaultStorage() {\n    return typeof sessionStorage !== 'undefined' ? sessionStorage : null;\n}","import {\n  AbstractValidationHandler,\n  ValidationParams\n} from './validation-handler';\n\n// declare var require: any;\n// let rs = require('jsrsasign');\n\nimport * as rs from 'jsrsasign';\n\n/**\n * Validates the signature of an id_token against one\n * of the keys of an JSON Web Key Set (jwks).\n *\n * This jwks can be provided by the discovery document.\n */\nexport class JwksValidationHandler extends AbstractValidationHandler {\n  /**\n   * Allowed algorithms\n   */\n  allowedAlgorithms: string[] = [\n    'HS256',\n    'HS384',\n    'HS512',\n    'RS256',\n    'RS384',\n    'RS512',\n    'ES256',\n    'ES384',\n    'PS256',\n    'PS384',\n    'PS512'\n  ];\n\n  /**\n   * Time period in seconds the timestamp in the signature can\n   * differ from the current time.\n   */\n  gracePeriodInSec = 600;\n\n  validateSignature(params: ValidationParams, retry = false): Promise<any> {\n    if (!params.idToken) throw new Error('Parameter idToken expected!');\n    if (!params.idTokenHeader)\n      throw new Error('Parameter idTokenHandler expected.');\n    if (!params.jwks) throw new Error('Parameter jwks expected!');\n\n    if (\n      !params.jwks['keys'] ||\n      !Array.isArray(params.jwks['keys']) ||\n      params.jwks['keys'].length === 0\n    ) {\n      throw new Error('Array keys in jwks missing!');\n    }\n\n    // console.debug('validateSignature: retry', retry);\n\n    let kid: string = params.idTokenHeader['kid'];\n    let keys: object[] = params.jwks['keys'];\n    let key: object;\n\n    let alg = params.idTokenHeader['alg'];\n\n    if (kid) {\n      key = keys.find(k => k['kid'] === kid /* && k['use'] === 'sig' */);\n    } else {\n      let kty = this.alg2kty(alg);\n      let matchingKeys = keys.filter(\n        k => k['kty'] === kty && k['use'] === 'sig'\n      );\n\n      /*\n            if (matchingKeys.length == 0) {\n                let error = 'No matching key found.';\n                console.error(error);\n                return Promise.reject(error);\n            }*/\n      if (matchingKeys.length > 1) {\n        let error =\n          'More than one matching key found. Please specify a kid in the id_token header.';\n        console.error(error);\n        return Promise.reject(error);\n      } else if (matchingKeys.length === 1) {\n        key = matchingKeys[0];\n      }\n    }\n\n    if (!key && !retry && params.loadKeys) {\n      return params\n        .loadKeys()\n        .then(loadedKeys => (params.jwks = loadedKeys))\n        .then(_ => this.validateSignature(params, true));\n    }\n\n    if (!key && retry && !kid) {\n      let error = 'No matching key found.';\n      console.error(error);\n      return Promise.reject(error);\n    }\n\n    if (!key && retry && kid) {\n      let error =\n        'expected key not found in property jwks. ' +\n        'This property is most likely loaded with the ' +\n        'discovery document. ' +\n        'Expected key id (kid): ' +\n        kid;\n\n      console.error(error);\n      return Promise.reject(error);\n    }\n\n    let keyObj = rs.KEYUTIL.getKey(key);\n    let validationOptions = {\n      alg: this.allowedAlgorithms,\n      gracePeriod: this.gracePeriodInSec\n    };\n    let isValid = rs.KJUR.jws.JWS.verifyJWT(\n      params.idToken,\n      keyObj,\n      validationOptions\n    );\n\n    if (isValid) {\n      return Promise.resolve();\n    } else {\n      return Promise.reject('Signature not valid');\n    }\n  }\n\n  private alg2kty(alg: string) {\n    switch (alg.charAt(0)) {\n      case 'R':\n        return 'RSA';\n      case 'E':\n        return 'EC';\n      default:\n        throw new Error('Cannot infer kty from alg: ' + alg);\n    }\n  }\n\n  calcHash(valueToHash: string, algorithm: string): Promise<string> {\n    let hashAlg = new rs.KJUR.crypto.MessageDigest({ alg: algorithm });\n    let result = hashAlg.digestString(valueToHash);\n    let byteArrayAsString = this.toByteArrayAsString(result);\n    return Promise.resolve(byteArrayAsString);\n  }\n\n  toByteArrayAsString(hexString: string) {\n    let result = '';\n    for (let i = 0; i < hexString.length; i += 2) {\n      let hexDigit = hexString.charAt(i) + hexString.charAt(i + 1);\n      let num = parseInt(hexDigit, 16);\n      result += String.fromCharCode(num);\n    }\n    return result;\n  }\n}","import { OAuthStorage, OAuthLogger } from './types';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\n\nimport { OAuthService } from './oauth-service';\nimport { UrlHelperService } from './url-helper.service';\n\nimport { OAuthModuleConfig } from './oauth-module.config';\nimport {\n  OAuthResourceServerErrorHandler,\n  OAuthNoopResourceServerErrorHandler\n} from './interceptors/resource-server-error-handler';\nimport { DefaultOAuthInterceptor } from './interceptors/default-oauth.interceptor';\nimport { ValidationHandler } from './token-validation/validation-handler';\nimport { NullValidationHandler } from './token-validation/null-validation-handler';\nimport { createDefaultLogger, createDefaultStorage } from './factories';\nimport { CryptoHandler } from './token-validation/crypto-handler';\nimport { JwksValidationHandler } from './token-validation/jwks-validation-handler';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [],\n  exports: []\n})\nexport class OAuthModule {\n  static forRoot(\n    config: OAuthModuleConfig = null,\n    validationHandlerClass = NullValidationHandler\n  ): ModuleWithProviders {\n    return {\n      ngModule: OAuthModule,\n      providers: [\n        OAuthService,\n        UrlHelperService,\n        { provide: OAuthLogger, useFactory: createDefaultLogger },\n        { provide: OAuthStorage, useFactory: createDefaultStorage },\n        { provide: ValidationHandler, useClass: validationHandlerClass},\n        { provide: CryptoHandler, useClass: JwksValidationHandler },\n        {\n          provide: OAuthResourceServerErrorHandler,\n          useClass: OAuthNoopResourceServerErrorHandler\n        },\n        { provide: OAuthModuleConfig, useValue: config },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: DefaultOAuthInterceptor,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { AuthConfig } from './auth.config';\n\nexport const AUTH_CONFIG = new InjectionToken<AuthConfig>('AUTH_CONFIG');\n"]}